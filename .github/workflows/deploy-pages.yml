name: Deploy site to GitHub Pages

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

# 同時実行を抑止して古いジョブをキャンセルする。
concurrency:
  group: pages
  cancel-in-progress: true

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure GitHub Pages
        uses: actions/configure-pages@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: |
            v3/src/package-lock.json
            v4/src/package-lock.json
            v5/src/package-lock.json
            v6/src/package-lock.json
            v7/src/package-lock.json
            v8/src/package-lock.json
            v9/src/package-lock.json
            v10/lib/package-lock.json
            v10/app/package-lock.json
            v11/lib/package-lock.json
            v11/app/package-lock.json

      # node_modulesを直接キャッシュして高速化。
      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: |
            v3/src/node_modules
            v4/src/node_modules
            v5/src/node_modules
            v6/src/node_modules
            v7/src/node_modules
            v8/src/node_modules
            v9/src/node_modules
            v10/lib/node_modules
            v10/app/node_modules
            v11/lib/node_modules
            v11/app/node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

      - name: Build v3 (if v3/src exists)
        shell: bash
        run: |
          set -euxo pipefail
          if [ -f "v3/src/package-lock.json" ]; then
            cd v3/src
            npm ci --prefer-offline --no-audit
            npm run build
            cd -
            # Copy built file to v3 root for GitHub Pages
            if [ -f "v3/dist/index.html" ]; then
              cp v3/dist/index.html v3/index.html
            fi
          else
            echo "Skipping v3 build: no v3/src/package-lock.json found."
          fi

      - name: Build v4 (if v4/src exists)
        shell: bash
        run: |
          set -euxo pipefail
          if [ -f "v4/src/package-lock.json" ]; then
            cd v4/src
            npm ci --prefer-offline --no-audit
            npm run build
            cd -
            # Copy built files to v4 root for GitHub Pages
            if [ -f "v4/dist/index.html" ]; then
              cp v4/dist/index.html v4/index.html
            fi
          else
            echo "Skipping v4 build: no v4/src/package-lock.json found."
          fi

      - name: Build v5 (if v5/src exists)
        shell: bash
        run: |
          set -euxo pipefail
          if [ -f "v5/src/package-lock.json" ]; then
            cd v5/src
            npm ci --prefer-offline --no-audit
            npm run build
            cd -
            # Copy built file to v5 root for GitHub Pages
            if [ -f "v5/dist/index.html" ]; then
              cp v5/dist/index.html v5/index.html
            fi
          else
            echo "Skipping v5 build: no v5/src/package-lock.json found."
          fi

      - name: Build v6 (if v6/src exists)
        shell: bash
        run: |
          set -euxo pipefail
          if [ -f "v6/src/package-lock.json" ]; then
            cd v6/src
            npm ci --prefer-offline --no-audit
            npm run build
            cd -
            # Copy built file to v6 root for GitHub Pages
            if [ -f "v6/dist/index.html" ]; then
              cp v6/dist/index.html v6/index.html
            fi
          else
            echo "Skipping v6 build: no v6/src/package-lock.json found."
          fi

      - name: Build v7 (if v7/src exists)
        shell: bash
        run: |
          set -euxo pipefail
          if [ -f "v7/src/package-lock.json" ]; then
            cd v7/src
            npm ci --prefer-offline --no-audit
            npm run build
            cd -
            # Copy built file to v7 root for GitHub Pages
            if [ -f "v7/dist/index.html" ]; then
              cp v7/dist/index.html v7/index.html
            fi
          else
            echo "Skipping v7 build: no v7/src/package-lock.json found."
          fi

      - name: Build v8 (if v8/src exists)
        shell: bash
        run: |
          set -euxo pipefail
          if [ -f "v8/src/package-lock.json" ]; then
            cd v8/src
            npm ci --prefer-offline --no-audit
            npm run build
            cd -
            # Copy all built files to v8 root for GitHub Pages (PWA requires all assets)
            if [ -d "v8/dist" ]; then
              cp -r v8/dist/* v8/
            fi
          else
            echo "Skipping v8 build: no v8/src/package-lock.json found."
          fi

      - name: Build v9 (if v9/src exists)
        shell: bash
        run: |
          set -euxo pipefail
          if [ -f "v9/src/package-lock.json" ]; then
            cd v9/src
            npm ci --prefer-offline --no-audit
            npm run build
            cd -
            # Copy all built files to v9 root for GitHub Pages (PWA requires all assets)
            if [ -d "v9/dist" ]; then
              cp -r v9/dist/* v9/
            fi
          else
            echo "Skipping v9 build: no v9/src/package-lock.json found."
          fi

      - name: Build v10 (if v10/lib and v10/app exist)
        shell: bash
        run: |
          set -euxo pipefail
          if [ -f "v10/lib/package-lock.json" ] && [ -f "v10/app/package-lock.json" ]; then
            # Build library first
            cd v10/lib
            npm ci --prefer-offline --no-audit
            npm run build
            cd -
            # Build app (depends on library)
            cd v10/app
            npm ci --prefer-offline --no-audit
            npm run build
            cd -
            # Copy all built files to v10 root for GitHub Pages (package.json has copy-to-root script)
            # The build script already copies to v10 root, but ensure it's there
            if [ -d "v10/app/dist" ]; then
              cp -r v10/app/dist/index.html v10/app/dist/flashcard.tsv v10/app/dist/assets v10/
            fi
          else
            echo "Skipping v10 build: v10/lib or v10/app package-lock.json not found."
          fi

      - name: Build v11 (if v11/lib and v11/app exist)
        shell: bash
        run: |
          set -euxo pipefail
          if [ -f "v11/lib/package-lock.json" ] && [ -f "v11/app/package-lock.json" ]; then
            # Build library first
            cd v11/lib
            npm ci --prefer-offline --no-audit
            npm run build
            cd -
            # Build app (depends on library)
            cd v11/app
            npm ci --prefer-offline --no-audit
            npm run build
            cd -
            # Copy all built files to v11 root for GitHub Pages (package.json has copy-to-root script)
            # The build script already copies to v11 root, but ensure it's there
            if [ -d "v11/app/dist" ]; then
              cp -r v11/app/dist/index.html v11/app/dist/flashcard.tsv v11/app/dist/assets v11/
            fi
          else
            echo "Skipping v11 build: v11/lib or v11/app package-lock.json not found."
          fi

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: .

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

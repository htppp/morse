import{w as t,k as e,$ as n,x as s,P as i,W as a,Y as r,K as o,B as d,G as c,I as l,M as u,N as h,F as p}from"./morse-engine-a8OruELh.js";!function(){const t=document.createElement("link").relList;if(!(t&&t.supports&&t.supports("modulepreload"))){for(const t of document.querySelectorAll('link[rel="modulepreload"]'))e(t);new MutationObserver(t=>{for(const n of t)if("childList"===n.type)for(const t of n.addedNodes)"LINK"===t.tagName&&"modulepreload"===t.rel&&e(t)}).observe(document,{childList:!0,subtree:!0})}function e(t){if(t.ep)return;t.ep=!0;const e=function(t){const e={};return t.integrity&&(e.integrity=t.integrity),t.referrerPolicy&&(e.referrerPolicy=t.referrerPolicy),"use-credentials"===t.crossOrigin?e.credentials="include":"anonymous"===t.crossOrigin?e.credentials="omit":e.credentials="same-origin",e}(t);fetch(t.href,e)}}();class v{menuItems=[{id:"vertical",title:"縦振り電鍵練習",description:"上下に動かす電鍵（ストレートキー）の練習",route:"vertical"},{id:"horizontal",title:"横振り電鍵練習",description:"左右に動かす電鍵（パドル）の練習（Iambic A/B対応）",route:"horizontal"},{id:"flashcard",title:"CW略語・Q符号",description:"CW通信で使用される略語とQ符号を学習",route:"flashcard"},{id:"koch",title:"コッホ法トレーニング",description:"段階的に文字を増やして学習する方式",route:"koch"},{id:"listening",title:"モールス信号聞き取り練習",description:"ランダムQSOや英文を聞いて練習",route:"listening"}];render(){const t=document.getElementById("app");t&&(t.innerHTML=`\n\t\t\t<div class="container">\n\t\t\t\t<header class="menu-header">\n\t\t\t\t\t<h1>モールス練習アプリ</h1>\n\t\t\t\t\t<p class="version">v10 - Engine/GUI分離版</p>\n\t\t\t\t</header>\n\n\t\t\t\t<main class="menu-main">\n\t\t\t\t\t<div class="menu-grid">\n\t\t\t\t\t\t${this.menuItems.map(t=>this.renderMenuItem(t)).join("")}\n\t\t\t\t\t</div>\n\t\t\t\t</main>\n\n\t\t\t\t<footer class="menu-footer">\n\t\t\t\t\t<p>&copy; 2025 モールス練習アプリ</p>\n\t\t\t\t</footer>\n\t\t\t</div>\n\t\t`,
//! イベントリスナーを設定。
this.attachEventListeners())}renderMenuItem(t){return`\n\t\t\t<div class="menu-item" data-route="${t.route}">\n\t\t\t\t<h2 class="menu-item-title">${t.title}</h2>\n\t\t\t\t<p class="menu-item-description">${t.description}</p>\n\t\t\t</div>\n\t\t`}attachEventListeners(){document.querySelectorAll(".menu-item").forEach(t=>{t.addEventListener("click",()=>{const e=t.getAttribute("data-route");e&&(window.location.hash=`#${e}`)})})}destroy(){
//! イベントリスナーは新しいHTMLで上書きされるため、特に処理不要。
}}class m{trainer;buffer;timer;audio;isKeyPressed=!1;keyPressHandler=null;keyReleaseHandler=null;updateIntervalId=null;currentWPM=20;keyCode="Space";latestEvaluation=null;overallStats=null;dotStats=null;dashStats=null;constructor(){
//! 設定を読み込む。
const a=localStorage.getItem("verticalKeyWPM");a&&(this.currentWPM=parseInt(a,10));const r=localStorage.getItem("verticalKeyCode");r&&(this.keyCode=r),
//! コアコンポーネントを初期化。
this.buffer=new t,this.timer=new e,this.audio=new n({frequency:700,volume:.5,wpm:this.currentWPM});
//! タイミング計算。
const o=s.calculate(this.currentWPM);
//! トレーナーを初期化（コールバックで音声制御とタイミング評価）。
this.trainer=new i(this.buffer,this.timer,o,{onKeyPress:()=>{
//! キー押下時に音を鳴らす。
this.audio.startContinuousTone()},onKeyRelease:()=>{
//! キー解放時に音を止める。
this.audio.stopContinuousTone()},onTimingEvaluated:t=>{
//! タイミング評価結果を保存。
this.latestEvaluation=t,this.updateTimingStatistics()}})}render(){const t=document.getElementById("app");t&&(t.innerHTML=`\n\t\t\t<div class="settings-icon" id="settingsIcon">\n\t\t\t\t<svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">\n\t\t\t\t\t<path d="M19.14,12.94c0.04-0.3,0.06-0.61,0.06-0.94c0-0.32-0.02-0.64-0.07-0.94l2.03-1.58c0.18-0.14,0.23-0.41,0.12-0.61 l-1.92-3.32c-0.12-0.22-0.37-0.29-0.59-0.22l-2.39,0.96c-0.5-0.38-1.03-0.7-1.62-0.94L14.4,2.81c-0.04-0.24-0.24-0.41-0.48-0.41 h-3.84c-0.24,0-0.43,0.17-0.47,0.41L9.25,5.35C8.66,5.59,8.12,5.92,7.63,6.29L5.24,5.33c-0.22-0.08-0.47,0-0.59,0.22L2.74,8.87 C2.62,9.08,2.66,9.34,2.86,9.48l2.03,1.58C4.84,11.36,4.8,11.69,4.8,12s0.02,0.64,0.07,0.94l-2.03,1.58 c-0.18,0.14-0.23,0.41-0.12,0.61l1.92,3.32c0.12,0.22,0.37,0.29,0.59,0.22l2.39-0.96c0.5,0.38,1.03,0.7,1.62,0.94l0.36,2.54 c0.05,0.24,0.24,0.41,0.48,0.41h3.84c0.24,0,0.44-0.17,0.47-0.41l0.36-2.54c0.59-0.24,1.13-0.56,1.62-0.94l2.39,0.96 c0.22,0.08,0.47,0,0.59-0.22l1.92-3.32c0.12-0.22,0.07-0.47-0.12-0.61L19.14,12.94z M12,15.6c-1.98,0-3.6-1.62-3.6-3.6 s1.62-3.6,3.6-3.6s3.6,1.62,3.6,3.6S13.98,15.6,12,15.6z"/>\n\t\t\t\t</svg>\n\t\t\t</div>\n\n\t\t\t<div class="container">\n\t\t\t\t<header class="header">\n\t\t\t\t\t<button class="back-btn">メニューに戻る</button>\n\t\t\t\t\t<h1>縦振り電鍵練習</h1>\n\t\t\t\t</header>\n\n\t\t\t\t<div class="key-button-container">\n\t\t\t\t\t<button class="key-button" id="morse-key">\n\t\t\t\t\t\tKEY\n\t\t\t\t\t\t<span class="key-label">(クリック/タップで送信)</span>\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\n\t\t\t\t<div class="practice-container">\n\t\t\t\t\t<div class="display-area">\n\t\t\t\t\t\t<div class="display-section">\n\t\t\t\t\t\t\t<h3>モールス信号</h3>\n\t\t\t\t\t\t\t<div class="display-output morse-buffer" id="morse-buffer">（ここにモールス符号が表示されます）</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class="display-section">\n\t\t\t\t\t\t\t<h3>デコード結果</h3>\n\t\t\t\t\t\t\t<div class="display-output" id="decoded-text">（ここにデコードされた文字が表示されます）</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div class="action-area">\n\t\t\t\t\t\t<button class="btn btn-large btn-danger" id="clear-btn">クリア</button>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div class="status-area">\n\t\t\t\t\t\t<div class="status-item">\n\t\t\t\t\t\t\t<span class="label">現在の速度</span>\n\t\t\t\t\t\t\t<span class="value" id="current-wpm">${this.currentWPM}</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class="status-item" id="key-status">\n\t\t\t\t\t\t\t<span class="label">キー状態</span>\n\t\t\t\t\t\t\t<span class="value">解放</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class="status-item">\n\t\t\t\t\t\t\t<span class="label">入力文字数</span>\n\t\t\t\t\t\t\t<span class="value" id="char-count">0</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div class="timing-evaluation-area">\n\t\t\t\t\t\t<h3>タイミング評価</h3>\n\t\t\t\t\t\t<div class="evaluation-panel">\n\t\t\t\t\t\t\t<div class="latest-evaluation">\n\t\t\t\t\t\t\t\t<h4>最新の入力</h4>\n\t\t\t\t\t\t\t\t<div id="latest-evaluation-content" class="evaluation-content">\n\t\t\t\t\t\t\t\t\t（入力待ち）\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class="statistics-panel">\n\t\t\t\t\t\t\t\t<h4>全体統計</h4>\n\t\t\t\t\t\t\t\t<div id="overall-stats-content" class="stats-content">\n\t\t\t\t\t\t\t\t\t（統計データなし）\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class="element-stats-panel">\n\t\t\t\t\t\t\t\t<div class="dot-stats">\n\t\t\t\t\t\t\t\t\t<h4>短点 (・) 統計</h4>\n\t\t\t\t\t\t\t\t\t<div id="dot-stats-content" class="stats-content">\n\t\t\t\t\t\t\t\t\t\t（データなし）\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div class="dash-stats">\n\t\t\t\t\t\t\t\t\t<h4>長点 (ー) 統計</h4>\n\t\t\t\t\t\t\t\t\t<div id="dash-stats-content" class="stats-content">\n\t\t\t\t\t\t\t\t\t\t（データなし）\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div class="instructions">\n\t\t\t\t\t\t<h3>使い方</h3>\n\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t<li>スペースキーまたは画面のボタンを押している間、モールス信号が送信されます</li>\n\t\t\t\t\t\t\t<li>短く押すと「・」(dit)、長く押すと「ー」(dah)になります</li>\n\t\t\t\t\t\t\t<li>文字間は自動的に判定されます</li>\n\t\t\t\t\t\t\t<li>WPM（Words Per Minute）で速度を調整できます</li>\n\t\t\t\t\t\t\t<li>画面右上の⚙アイコンから音量・周波数・速度を調整できます</li>\n\t\t\t\t\t\t\t<li>音声が鳴らない場合は、一度ボタンをクリックしてください（ブラウザのオーディオポリシー）</li>\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t`,
//! イベントリスナーを設定。
this.attachEventListeners(),
//! 定期更新を開始。
this.startUpdate())}attachEventListeners(){
//! 戻るボタン。
const t=document.querySelector(".back-btn");t?.addEventListener("click",()=>{window.location.hash="#menu"}),
//! 設定アイコン。
document.getElementById("settingsIcon")?.addEventListener("click",()=>{this.openSettingsModal()});
//! クリアボタン。
const e=document.getElementById("clear-btn");e?.addEventListener("click",()=>{this.trainer.clear(),this.updateDisplay()}),
//! キーボードイベント（設定されたキー）。
this.keyPressHandler=t=>{t.code!==this.keyCode||t.repeat||(t.preventDefault(),this.isKeyPressed||this.handleKeyDown())},this.keyReleaseHandler=t=>{t.code===this.keyCode&&(t.preventDefault(),this.isKeyPressed&&this.handleKeyUp())},window.addEventListener("keydown",this.keyPressHandler),window.addEventListener("keyup",this.keyReleaseHandler);
//! ボタンイベント（マウス/タッチ）。
const n=document.getElementById("morse-key");n&&(
//! マウスイベント。
n.addEventListener("mousedown",t=>{t.preventDefault(),this.isKeyPressed||this.handleKeyDown()}),n.addEventListener("mouseup",t=>{t.preventDefault(),this.isKeyPressed&&this.handleKeyUp()}),n.addEventListener("mouseleave",()=>{this.isKeyPressed&&this.handleKeyUp()}),
//! タッチイベント。
n.addEventListener("touchstart",t=>{t.preventDefault(),this.isKeyPressed||this.handleKeyDown()}),n.addEventListener("touchend",t=>{t.preventDefault(),this.isKeyPressed&&this.handleKeyUp()}),n.addEventListener("touchcancel",()=>{this.isKeyPressed&&this.handleKeyUp()}))}handleKeyDown(){this.isKeyPressed=!0,this.trainer.keyPress(),this.updateKeyStatus(!0);
//! ボタンの見た目を更新。
const t=document.getElementById("morse-key");t&&t.classList.add("pressed")}handleKeyUp(){this.isKeyPressed=!1,this.trainer.keyRelease(),this.updateKeyStatus(!1);
//! ボタンの見た目を更新。
const t=document.getElementById("morse-key");t&&t.classList.remove("pressed")}startUpdate(){
//! 100msごとに画面を更新。
this.updateIntervalId=window.setInterval(()=>{this.updateDisplay()},100)}updateDisplay(){const t=document.getElementById("morse-buffer"),e=document.getElementById("decoded-text"),n=document.getElementById("char-count");if(t){const e=this.trainer.getBuffer(),n=this.trainer.getSequence(),s=n?`${e} ${n}`:e;t.textContent=s||"（ここにモールス符号が表示されます）"}if(e){const t=this.trainer.getDecoded();e.textContent=t||"（ここにデコードされた文字が表示されます）"}if(n){const t=this.trainer.getDecoded();n.textContent=t.length.toString()}
//! タイミング評価表示を更新。
this.updateTimingDisplay()}updateTimingStatistics(){this.overallStats=this.trainer.getTimingStatistics();const t=this.trainer.getStatisticsByElement();this.dotStats=t.dot,this.dashStats=t.dash}updateTimingDisplay(){
//! 最新評価を表示。
const t=document.getElementById("latest-evaluation-content");if(t&&this.latestEvaluation){const e=this.latestEvaluation,n="."===e.record.element?"短点 (・)":"長点 (ー)",i=e.accuracy.toFixed(1),a=this.getAccuracyClass(e.accuracy),r=s.calculate(this.currentWPM).dot,o=8*r,d=e.record.expectedDuration,c=e.record.actualDuration,l=d/o*100,u=c/o*100,h=c-d,p=h>0?"longer":h<0?"shorter":"perfect",v=h>0?`+${h}ms (長い)`:h<0?`${h}ms (短い)`:"完璧";t.innerHTML=`\n\t\t\t\t<div class="eval-item">\n\t\t\t\t\t<span class="eval-label">要素:</span>\n\t\t\t\t\t<span class="eval-value">${n}</span>\n\t\t\t\t</div>\n\t\t\t\t<div class="timing-chart">\n\t\t\t\t\t<div class="chart-row">\n\t\t\t\t\t\t<div class="chart-label">理論値:</div>\n\t\t\t\t\t\t<div class="chart-bar-container">\n\t\t\t\t\t\t\t<div class="chart-bar expected" style="width: ${l}%">\n\t\t\t\t\t\t\t\t<span class="chart-value">${d}ms</span>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class="chart-row">\n\t\t\t\t\t\t<div class="chart-label">実測値:</div>\n\t\t\t\t\t\t<div class="chart-bar-container">\n\t\t\t\t\t\t\t<div class="chart-bar actual ${a}" style="width: ${u}%">\n\t\t\t\t\t\t\t\t<span class="chart-value">${c}ms</span>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class="chart-scale">\n\t\t\t\t\t\t<span>0ms</span>\n\t\t\t\t\t\t<span>${Math.round(4*r)}ms</span>\n\t\t\t\t\t\t<span>${Math.round(o)}ms</span>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class="eval-item">\n\t\t\t\t\t<span class="eval-label">精度:</span>\n\t\t\t\t\t<span class="eval-value accuracy-${a}">${i}%</span>\n\t\t\t\t</div>\n\t\t\t\t<div class="eval-item">\n\t\t\t\t\t<span class="eval-label">誤差:</span>\n\t\t\t\t\t<span class="eval-value timing-diff-${p}">${v}</span>\n\t\t\t\t</div>\n\t\t\t`}
//! 全体統計を表示。
const e=document.getElementById("overall-stats-content");if(e&&this.overallStats&&this.overallStats.count>0){const t=this.overallStats,n=this.getAccuracyClass(t.averageAccuracy);e.innerHTML=`\n\t\t\t\t<div class="stat-item">\n\t\t\t\t\t<span class="stat-label">入力数:</span>\n\t\t\t\t\t<span class="stat-value">${t.count}回</span>\n\t\t\t\t</div>\n\t\t\t\t<div class="stat-item">\n\t\t\t\t\t<span class="stat-label">平均精度:</span>\n\t\t\t\t\t<span class="stat-value accuracy-${n}">${t.averageAccuracy.toFixed(1)} ± ${t.standardDeviation.toFixed(1)}%</span>\n\t\t\t\t</div>\n\t\t\t\t<div class="stat-item">\n\t\t\t\t\t<span class="stat-label">最高精度:</span>\n\t\t\t\t\t<span class="stat-value">${t.maxAccuracy.toFixed(1)}%</span>\n\t\t\t\t</div>\n\t\t\t\t<div class="stat-item">\n\t\t\t\t\t<span class="stat-label">最低精度:</span>\n\t\t\t\t\t<span class="stat-value">${t.minAccuracy.toFixed(1)}%</span>\n\t\t\t\t</div>\n\t\t\t`}
//! 短点統計を表示。
const n=document.getElementById("dot-stats-content");if(n&&this.dotStats&&this.dotStats.count>0){const t=this.dotStats,e=this.getAccuracyClass(t.averageAccuracy);n.innerHTML=`\n\t\t\t\t<div class="stat-item">\n\t\t\t\t\t<span class="stat-label">入力数:</span>\n\t\t\t\t\t<span class="stat-value">${t.count}回</span>\n\t\t\t\t</div>\n\t\t\t\t<div class="stat-item">\n\t\t\t\t\t<span class="stat-label">平均精度:</span>\n\t\t\t\t\t<span class="stat-value accuracy-${e}">${t.averageAccuracy.toFixed(1)} ± ${t.standardDeviation.toFixed(1)}%</span>\n\t\t\t\t</div>\n\t\t\t\t<div class="stat-item">\n\t\t\t\t\t<span class="stat-label">平均誤差:</span>\n\t\t\t\t\t<span class="stat-value">${t.averageAbsoluteError.toFixed(1)}ms</span>\n\t\t\t\t</div>\n\t\t\t`}
//! 長点統計を表示。
const i=document.getElementById("dash-stats-content");if(i&&this.dashStats&&this.dashStats.count>0){const t=this.dashStats,e=this.getAccuracyClass(t.averageAccuracy);i.innerHTML=`\n\t\t\t\t<div class="stat-item">\n\t\t\t\t\t<span class="stat-label">入力数:</span>\n\t\t\t\t\t<span class="stat-value">${t.count}回</span>\n\t\t\t\t</div>\n\t\t\t\t<div class="stat-item">\n\t\t\t\t\t<span class="stat-label">平均精度:</span>\n\t\t\t\t\t<span class="stat-value accuracy-${e}">${t.averageAccuracy.toFixed(1)} ± ${t.standardDeviation.toFixed(1)}%</span>\n\t\t\t\t</div>\n\t\t\t\t<div class="stat-item">\n\t\t\t\t\t<span class="stat-label">平均誤差:</span>\n\t\t\t\t\t<span class="stat-value">${t.averageAbsoluteError.toFixed(1)}ms</span>\n\t\t\t\t</div>\n\t\t\t`}}getAccuracyClass(t){return t>=90?"excellent":t>=70?"good":t>=50?"fair":"poor"}updateKeyStatus(t){const e=document.getElementById("key-status");if(e){const n=e.querySelector(".value");n&&(n.textContent=t?"押下中":"解放"),t?e.classList.add("active"):e.classList.remove("active")}}openSettingsModal(){
//! 現在の設定値を取得。
const t={volume:Math.round(100*this.audio.getVolume()),frequency:this.audio.getFrequency(),wpm:this.currentWPM,keyCode:this.keyCode},e={volume:this.audio.getVolume(),frequency:this.audio.getFrequency(),wpm:this.currentWPM,keyCode:this.keyCode};
//! 設定変更前の値を保存（キャンセル時の復元用）。
//! モーダルを表示。
new a("vertical-key-settings-modal",r,t,{onSave:t=>{
//! 設定を保存。
this.audio.setVolume(t.volume/100),this.audio.setFrequency(t.frequency),this.audio.setWPM(t.wpm),this.currentWPM=t.wpm,this.keyCode=t.keyCode,
//! localStorageに保存。
localStorage.setItem("verticalKeyWPM",this.currentWPM.toString()),localStorage.setItem("verticalKeyCode",this.keyCode);
//! タイミングを再計算してトレーナーを再初期化。
const e=s.calculate(this.currentWPM);this.trainer=new i(this.buffer,this.timer,e,{onKeyPress:()=>{this.audio.startContinuousTone()},onKeyRelease:()=>{this.audio.stopContinuousTone()},onTimingEvaluated:t=>{this.latestEvaluation=t,this.updateTimingStatistics()}});
//! 現在のWPM表示を更新。
const n=document.getElementById("current-wpm");n&&(n.textContent=this.currentWPM.toString())},onCancel:()=>{
//! 設定を元に戻す。
this.audio.setVolume(e.volume),this.audio.setFrequency(e.frequency),this.audio.setWPM(e.wpm),this.currentWPM=e.wpm,this.keyCode=e.keyCode}}).show("vertical-key")}destroy(){
//! イベントリスナーを削除。
this.keyPressHandler&&(window.removeEventListener("keydown",this.keyPressHandler),this.keyPressHandler=null),this.keyReleaseHandler&&(window.removeEventListener("keyup",this.keyReleaseHandler),this.keyReleaseHandler=null),
//! 定期更新を停止。
null!==this.updateIntervalId&&(clearInterval(this.updateIntervalId),this.updateIntervalId=null),
//! 音声を停止。
this.audio.stopContinuousTone(),
//! トレーナーをクリア。
this.trainer.clear()}}class g{trainer;buffer;timer;audio;timings;leftPressed=!1;rightPressed=!1;updateIntervalId=null;currentWPM=20;iambicMode="B";paddleLayout="normal";leftKeyCode="KeyJ";rightKeyCode="KeyK";keyPressHandler=null;keyReleaseHandler=null;constructor(){
//! 設定を読み込む。
const s=localStorage.getItem("horizontalKeyWPM");s&&(this.currentWPM=parseInt(s,10));const i=localStorage.getItem("horizontalKeyIambicMode");"A"!==i&&"B"!==i||(this.iambicMode=i);const a=localStorage.getItem("horizontalKeyPaddleLayout");"normal"!==a&&"reversed"!==a||(this.paddleLayout=a);const r=localStorage.getItem("horizontalKeyLeftCode");r&&(this.leftKeyCode=r);const o=localStorage.getItem("horizontalKeyRightCode");o&&(this.rightKeyCode=o),
//! コアコンポーネントを初期化。
this.buffer=new t,this.timer=new e,this.audio=new n({frequency:700,volume:.5,wpm:this.currentWPM}),
//! トレーナーを初期化。
this.initializeTrainer()}initializeTrainer(){this.timings=s.calculate(this.currentWPM),this.trainer=new o(this.buffer,this.timer,this.timings,{onElementStart:(t,e)=>{
//! 要素送信開始時に指定時間だけ音を鳴らす。
this.audio.scheduleTone(0,e)},onSpacingEvaluated:()=>{
//! スペーシング評価が完了したら画面を更新。
this.updateDisplay()}},{iambicMode:this.iambicMode,paddleLayout:this.paddleLayout})}render(){const t=document.getElementById("app");t&&(t.innerHTML=`\n\t\t\t<div class="settings-icon" id="settingsIcon">\n\t\t\t\t<svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">\n\t\t\t\t\t<path d="M19.14,12.94c0.04-0.3,0.06-0.61,0.06-0.94c0-0.32-0.02-0.64-0.07-0.94l2.03-1.58c0.18-0.14,0.23-0.41,0.12-0.61 l-1.92-3.32c-0.12-0.22-0.37-0.29-0.59-0.22l-2.39,0.96c-0.5-0.38-1.03-0.7-1.62-0.94L14.4,2.81c-0.04-0.24-0.24-0.41-0.48-0.41 h-3.84c-0.24,0-0.43,0.17-0.47,0.41L9.25,5.35C8.66,5.59,8.12,5.92,7.63,6.29L5.24,5.33c-0.22-0.08-0.47,0-0.59,0.22L2.74,8.87 C2.62,9.08,2.66,9.34,2.86,9.48l2.03,1.58C4.84,11.36,4.8,11.69,4.8,12s0.02,0.64,0.07,0.94l-2.03,1.58 c-0.18,0.14-0.23,0.41-0.12,0.61l1.92,3.32c0.12,0.22,0.37,0.29,0.59,0.22l2.39-0.96c0.5,0.38,1.03,0.7,1.62,0.94l0.36,2.54 c0.05,0.24,0.24,0.41,0.48,0.41h3.84c0.24,0,0.44-0.17,0.47-0.41l0.36-2.54c0.59-0.24,1.13-0.56,1.62-0.94l2.39,0.96 c0.22,0.08,0.47,0,0.59-0.22l1.92-3.32c0.12-0.22,0.07-0.47-0.12-0.61L19.14,12.94z M12,15.6c-1.98,0-3.6-1.62-3.6-3.6 s1.62-3.6,3.6-3.6s3.6,1.62,3.6,3.6S13.98,15.6,12,15.6z"/>\n\t\t\t\t</svg>\n\t\t\t</div>\n\n\t\t\t<div class="container">\n\t\t\t\t<header class="header">\n\t\t\t\t\t<button class="back-btn">メニューに戻る</button>\n\t\t\t\t\t<h1>横振り電鍵練習</h1>\n\t\t\t\t</header>\n\n\t\t\t\t<div class="paddle-container">\n\t\t\t\t\t<button class="paddle-button dit" id="left-paddle">\n\t\t\t\t\t\tDIT\n\t\t\t\t\t\t<span class="paddle-label">(短点)</span>\n\t\t\t\t\t\t<span class="paddle-key">J キー</span>\n\t\t\t\t\t</button>\n\t\t\t\t\t<button class="paddle-button dah" id="right-paddle">\n\t\t\t\t\t\tDAH\n\t\t\t\t\t\t<span class="paddle-label">(長点)</span>\n\t\t\t\t\t\t<span class="paddle-key">K キー</span>\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\n\t\t\t\t<div class="practice-container">\n\t\t\t\t\t<div class="display-area">\n\t\t\t\t\t\t<div class="display-section">\n\t\t\t\t\t\t\t<h3>モールス信号</h3>\n\t\t\t\t\t\t\t<div class="display-output morse-buffer" id="morse-buffer">（ここにモールス符号が表示されます）</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class="display-section">\n\t\t\t\t\t\t\t<h3>デコード結果</h3>\n\t\t\t\t\t\t\t<div class="display-output" id="decoded-text">（ここにデコードされた文字が表示されます）</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div class="action-area">\n\t\t\t\t\t\t<button class="btn btn-large btn-danger" id="clear-btn">クリア</button>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div class="status-area">\n\t\t\t\t\t\t<div class="status-item">\n\t\t\t\t\t\t\t<span class="label">現在の速度</span>\n\t\t\t\t\t\t\t<span class="value" id="current-wpm">${this.currentWPM}</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class="status-item">\n\t\t\t\t\t\t\t<span class="label">Iambicモード</span>\n\t\t\t\t\t\t\t<span class="value" id="current-iambic-mode">${this.iambicMode}</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class="status-item">\n\t\t\t\t\t\t\t<span class="label">入力文字数</span>\n\t\t\t\t\t\t\t<span class="value" id="char-count">0</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div class="timing-evaluation-section">\n\t\t\t\t\t\t<h3>スペーシング評価</h3>\n\t\t\t\t\t\t<div class="timing-stats-grid">\n\t\t\t\t\t\t\t<div class="timing-stat-card">\n\t\t\t\t\t\t\t\t<div class="timing-stat-label">平均精度</div>\n\t\t\t\t\t\t\t\t<div class="timing-stat-value" id="timing-avg-accuracy">--%</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class="timing-stat-card">\n\t\t\t\t\t\t\t\t<div class="timing-stat-label">平均誤差</div>\n\t\t\t\t\t\t\t\t<div class="timing-stat-value" id="timing-avg-error">--ms</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class="timing-stat-card">\n\t\t\t\t\t\t\t\t<div class="timing-stat-label">評価数</div>\n\t\t\t\t\t\t\t\t<div class="timing-stat-value" id="timing-count">0</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class="timing-element-stats">\n\t\t\t\t\t\t\t<div class="timing-element-stat">\n\t\t\t\t\t\t\t\t<h4>文字間</h4>\n\t\t\t\t\t\t\t\t<div class="timing-element-detail">\n\t\t\t\t\t\t\t\t\t<span>期待値: <span id="timing-char-expected">--ms</span></span>\n\t\t\t\t\t\t\t\t\t<span>精度: <span id="timing-char-accuracy">--%</span></span>\n\t\t\t\t\t\t\t\t\t<span>誤差: <span id="timing-char-error">--ms</span></span>\n\t\t\t\t\t\t\t\t\t<span>回数: <span id="timing-char-count">0</span></span>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class="timing-element-stat">\n\t\t\t\t\t\t\t\t<h4>単語間</h4>\n\t\t\t\t\t\t\t\t<div class="timing-element-detail">\n\t\t\t\t\t\t\t\t\t<span>期待値: <span id="timing-word-expected">--ms</span></span>\n\t\t\t\t\t\t\t\t\t<span>精度: <span id="timing-word-accuracy">--%</span></span>\n\t\t\t\t\t\t\t\t\t<span>誤差: <span id="timing-word-error">--ms</span></span>\n\t\t\t\t\t\t\t\t\t<span>回数: <span id="timing-word-count">0</span></span>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div class="instructions">\n\t\t\t\t\t\t<h3>使い方</h3>\n\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t<li>左パドル（J）: 短点（・）/ 右パドル（K）: 長点（ー）</li>\n\t\t\t\t\t\t\t<li>両方同時押しで自動交互送信（Iambic）</li>\n\t\t\t\t\t\t\t<li>Iambic Bモード: スクイーズ後1要素追加送信</li>\n\t\t\t\t\t\t\t<li>画面右上の⚙アイコンから設定（WPM、Iambicモード、パドルレイアウト、音量・周波数）を変更できます</li>\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t`,
//! イベントリスナーを設定。
this.attachEventListeners(),
//! 定期更新を開始。
this.startUpdate())}attachEventListeners(){
//! 戻るボタン。
const t=document.querySelector(".back-btn");t?.addEventListener("click",()=>{window.location.hash="#menu"}),
//! 設定アイコン。
document.getElementById("settingsIcon")?.addEventListener("click",()=>{this.openSettingsModal()});
//! クリアボタン。
const e=document.getElementById("clear-btn");e?.addEventListener("click",()=>{this.trainer.clear(),this.updateDisplay()}),
//! キーボードイベント（設定されたキー）。
this.keyPressHandler=t=>{t.repeat||(t.code===this.leftKeyCode?(t.preventDefault(),this.handleLeftPaddlePress()):t.code===this.rightKeyCode&&(t.preventDefault(),this.handleRightPaddlePress()))},this.keyReleaseHandler=t=>{t.code===this.leftKeyCode?(t.preventDefault(),this.handleLeftPaddleRelease()):t.code===this.rightKeyCode&&(t.preventDefault(),this.handleRightPaddleRelease())},window.addEventListener("keydown",this.keyPressHandler),window.addEventListener("keyup",this.keyReleaseHandler);
//! ボタンイベント（左パドル）。
const n=document.getElementById("left-paddle");n&&(n.addEventListener("mousedown",t=>{t.preventDefault(),this.handleLeftPaddlePress()}),n.addEventListener("mouseup",t=>{t.preventDefault(),this.handleLeftPaddleRelease()}),n.addEventListener("mouseleave",()=>{this.leftPressed&&this.handleLeftPaddleRelease()}),n.addEventListener("touchstart",t=>{t.preventDefault(),this.handleLeftPaddlePress()}),n.addEventListener("touchend",t=>{t.preventDefault(),this.handleLeftPaddleRelease()}),n.addEventListener("touchcancel",()=>{this.leftPressed&&this.handleLeftPaddleRelease()}));
//! ボタンイベント（右パドル）。
const s=document.getElementById("right-paddle");s&&(s.addEventListener("mousedown",t=>{t.preventDefault(),this.handleRightPaddlePress()}),s.addEventListener("mouseup",t=>{t.preventDefault(),this.handleRightPaddleRelease()}),s.addEventListener("mouseleave",()=>{this.rightPressed&&this.handleRightPaddleRelease()}),s.addEventListener("touchstart",t=>{t.preventDefault(),this.handleRightPaddlePress()}),s.addEventListener("touchend",t=>{t.preventDefault(),this.handleRightPaddleRelease()}),s.addEventListener("touchcancel",()=>{this.rightPressed&&this.handleRightPaddleRelease()}))}handleLeftPaddlePress(){if(this.leftPressed)return;this.leftPressed=!0,this.trainer.leftPaddlePress();const t=document.getElementById("left-paddle");t&&t.classList.add("pressed")}handleLeftPaddleRelease(){if(!this.leftPressed)return;this.leftPressed=!1,this.trainer.leftPaddleRelease();const t=document.getElementById("left-paddle");t&&t.classList.remove("pressed")}handleRightPaddlePress(){if(this.rightPressed)return;this.rightPressed=!0,this.trainer.rightPaddlePress();const t=document.getElementById("right-paddle");t&&t.classList.add("pressed")}handleRightPaddleRelease(){if(!this.rightPressed)return;this.rightPressed=!1,this.trainer.rightPaddleRelease();const t=document.getElementById("right-paddle");t&&t.classList.remove("pressed")}updatePaddleLabels(){const t=document.getElementById("left-paddle"),e=document.getElementById("right-paddle");"normal"===this.paddleLayout?(t&&(t.className="paddle-button dit",t.innerHTML='\n\t\t\t\t\tDIT\n\t\t\t\t\t<span class="paddle-label">(短点)</span>\n\t\t\t\t\t<span class="paddle-key">J キー</span>\n\t\t\t\t'),e&&(e.className="paddle-button dah",e.innerHTML='\n\t\t\t\t\tDAH\n\t\t\t\t\t<span class="paddle-label">(長点)</span>\n\t\t\t\t\t<span class="paddle-key">K キー</span>\n\t\t\t\t')):(t&&(t.className="paddle-button dah",t.innerHTML='\n\t\t\t\t\tDAH\n\t\t\t\t\t<span class="paddle-label">(長点)</span>\n\t\t\t\t\t<span class="paddle-key">J キー</span>\n\t\t\t\t'),e&&(e.className="paddle-button dit",e.innerHTML='\n\t\t\t\t\tDIT\n\t\t\t\t\t<span class="paddle-label">(短点)</span>\n\t\t\t\t\t<span class="paddle-key">K キー</span>\n\t\t\t\t')),
//! イベントリスナーを再設定。
this.attachEventListeners()}startUpdate(){
//! 100msごとに画面を更新。
this.updateIntervalId=window.setInterval(()=>{this.updateDisplay()},100)}updateDisplay(){const t=document.getElementById("morse-buffer"),e=document.getElementById("decoded-text"),n=document.getElementById("char-count");if(t){const e=this.trainer.getBuffer(),n=this.trainer.getSequence(),s=n?`${e} ${n}`:e;t.textContent=s||"（ここにモールス符号が表示されます）"}if(e){const t=this.trainer.getDecoded();e.textContent=t||"（ここにデコードされた文字が表示されます）"}if(n){const t=this.trainer.getDecoded();n.textContent=t.length.toString()}
//! スペーシング評価統計を更新。
const s=this.trainer.getSpacingStatistics(),i=this.trainer.getStatisticsBySpacingType(),a=document.getElementById("timing-avg-accuracy"),r=document.getElementById("timing-avg-error"),o=document.getElementById("timing-count");a&&(a.textContent=s.count>0?`${s.averageAccuracy.toFixed(1)} ± ${s.standardDeviation.toFixed(1)}%`:"--%"),r&&(r.textContent=s.count>0?`${Math.round(s.averageAbsoluteError)}ms`:"--ms"),o&&(o.textContent=s.count.toString());
//! 文字間スペース統計。
const d=document.getElementById("timing-char-expected"),c=document.getElementById("timing-char-accuracy"),l=document.getElementById("timing-char-error"),u=document.getElementById("timing-char-count");d&&(d.textContent=`${Math.round(this.timings.charGap)}ms`),c&&(c.textContent=i.character.count>0?`${i.character.averageAccuracy.toFixed(1)} ± ${i.character.standardDeviation.toFixed(1)}%`:"--%"),l&&(l.textContent=i.character.count>0?`${Math.round(i.character.averageAbsoluteError)}ms`:"--ms"),u&&(u.textContent=i.character.count.toString());
//! 単語間スペース統計。
const h=document.getElementById("timing-word-expected"),p=document.getElementById("timing-word-accuracy"),v=document.getElementById("timing-word-error"),m=document.getElementById("timing-word-count");h&&(h.textContent=`${Math.round(this.timings.wordGap)}ms`),p&&(p.textContent=i.word.count>0?`${i.word.averageAccuracy.toFixed(1)} ± ${i.word.standardDeviation.toFixed(1)}%`:"--%"),v&&(v.textContent=i.word.count>0?`${Math.round(i.word.averageAbsoluteError)}ms`:"--ms"),m&&(m.textContent=i.word.count.toString())}openSettingsModal(){
//! 現在の設定値を取得。
const t={volume:Math.round(100*this.audio.getVolume()),frequency:this.audio.getFrequency(),wpm:this.currentWPM,iambicMode:this.iambicMode,paddleLayout:this.paddleLayout,leftKeyCode:this.leftKeyCode,rightKeyCode:this.rightKeyCode},e={volume:this.audio.getVolume(),frequency:this.audio.getFrequency(),wpm:this.currentWPM,iambicMode:this.iambicMode,paddleLayout:this.paddleLayout,leftKeyCode:this.leftKeyCode,rightKeyCode:this.rightKeyCode};
//! 設定変更前の値を保存（キャンセル時の復元用）。
//! モーダルを表示。
new a("horizontal-key-settings-modal",r,t,{onSave:t=>{
//! 設定を保存。
this.audio.setVolume(t.volume/100),this.audio.setFrequency(t.frequency),this.audio.setWPM(t.wpm),this.currentWPM=t.wpm,this.iambicMode=t.iambicMode,this.paddleLayout=t.paddleLayout,this.leftKeyCode=t.leftKeyCode,this.rightKeyCode=t.rightKeyCode,
//! localStorageに保存。
localStorage.setItem("horizontalKeyWPM",this.currentWPM.toString()),localStorage.setItem("horizontalKeyIambicMode",this.iambicMode),localStorage.setItem("horizontalKeyPaddleLayout",this.paddleLayout),localStorage.setItem("horizontalKeyLeftCode",this.leftKeyCode),localStorage.setItem("horizontalKeyRightCode",this.rightKeyCode);
//! 現在のWPM表示を更新。
const e=document.getElementById("current-wpm");e&&(e.textContent=this.currentWPM.toString());
//! 現在のIambicモード表示を更新。
const n=document.getElementById("current-iambic-mode");n&&(n.textContent=this.iambicMode),
//! パドルレイアウトに応じてラベルを更新。
this.updatePaddleLabels(),
//! トレーナーを再初期化。
this.initializeTrainer()},onCancel:()=>{
//! 設定を元に戻す。
this.audio.setVolume(e.volume),this.audio.setFrequency(e.frequency),this.audio.setWPM(e.wpm),this.currentWPM=e.wpm,this.iambicMode=e.iambicMode,this.paddleLayout=e.paddleLayout,this.leftKeyCode=e.leftKeyCode,this.rightKeyCode=e.rightKeyCode}}).show("horizontal-key")}destroy(){
//! イベントリスナーを削除。
this.keyPressHandler&&(window.removeEventListener("keydown",this.keyPressHandler),this.keyPressHandler=null),this.keyReleaseHandler&&(window.removeEventListener("keyup",this.keyReleaseHandler),this.keyReleaseHandler=null),
//! 定期更新を停止。
null!==this.updateIntervalId&&(clearInterval(this.updateIntervalId),this.updateIntervalId=null),
//! トレーナーをクリア。
this.trainer.clear()}}async function b(t){
//! TSVファイルを取得。
const e=await fetch(t);if(!e.ok)throw new Error(`Failed to load flashcard data: ${e.statusText}`);return function(t){
//! 行に分割。
const e=t.split("\n").filter(t=>t.trim());if(0===e.length)return[];
//! 先頭行はヘッダーなのでスキップ。
return e.slice(1).map((t,e)=>{
//! タブで分割。
const n=t.split("\t");
//! 最低限6列（タグ、頻度、略語、英文、和訳、説明）必要。
if(n.length<6)return null;return{tags:n[0].trim(),frequency:parseInt(n[1].trim(),10)||1,abbreviation:n[2].trim(),english:n[3].trim(),japanese:n[4].trim(),description:n[5]?.trim(),example:n[6]?.trim()}}).filter(t=>null!==t)}(await e.text())}class y{allEntries=[];filteredEntries=[];currentState="loading";selectedTags=new Set;selectedFrequencies=new Set([5]);searchQuery="";displayMode="card";sortColumn="abbreviation";sortDirection="asc";learnQuestionType="abbr-to-meaning";learnCards=[];currentLearnIndex=0;isFlipped=!1;reviewMode=!1;progress={known:new Set,unknown:new Set};questionType="abbr-to-meaning";questionCount=10;questions=[];currentQuestionIndex=0;results=[];audio;currentlyPlaying=null;constructor(){this.audio=new n({frequency:700,volume:.5,wpm:20}),
//! ライブラリから状態を読み込む。
this.progress=d.loadProgress();const t=d.loadFilters();this.selectedTags=t.selectedTags,this.selectedFrequencies=t.selectedFrequencies,this.searchQuery=t.searchQuery;const e=d.loadViewState();this.displayMode=e.displayMode,this.sortColumn=e.sortColumn,this.sortDirection=e.sortDirection,this.learnQuestionType=e.learnQuestionType,this.questionType=e.examQuestionType}saveProgress(){d.saveProgress(this.progress)}clearProgress(){this.progress={known:new Set,unknown:new Set},d.clearProgress()}saveFilters(){d.saveFilters({selectedTags:this.selectedTags,selectedFrequencies:this.selectedFrequencies,searchQuery:this.searchQuery})}async render(){const t=document.getElementById("app");if(t)if("loading"===this.currentState){
//! ローディング画面を表示。
t.innerHTML='\n\t\t\t\t<div class="container">\n\t\t\t\t\t<header class="header">\n\t\t\t\t\t\t<h1>CW略語・Q符号学習</h1>\n\t\t\t\t\t\t<button class="back-btn">メニューに戻る</button>\n\t\t\t\t\t</header>\n\t\t\t\t\t<div class="loading-container">\n\t\t\t\t\t\t<p>フラッシュカードデータを読み込み中...</p>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t';const n=document.querySelector(".back-btn");n?.addEventListener("click",()=>{window.location.hash="#menu"});
//! データをロード。
try{this.allEntries=await b("/flashcard.tsv"),this.updateFilteredEntries();
//! データロード完了後、保存されていたviewModeを復元。
const t=d.loadViewState();this.currentState=t.viewMode,this.render()}catch(e){t.innerHTML=`\n\t\t\t\t\t<div class="container">\n\t\t\t\t\t\t<header class="header">\n\t\t\t\t\t\t\t<h1>CW略語・Q符号学習</h1>\n\t\t\t\t\t\t\t<button class="back-btn">メニューに戻る</button>\n\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<div class="error-container">\n\t\t\t\t\t\t\t<p>データの読み込みに失敗しました。</p>\n\t\t\t\t\t\t\t<p>エラー: ${e}</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t`}}else"browse"===this.currentState?this.renderBrowseMode():"learn"===this.currentState?this.renderLearnMode():"exam"===this.currentState?this.renderExamMode():"exam-result"===this.currentState&&this.renderExamResultMode()}renderFilterSection(){return`\n\t\t\t<div class="filter-section">\n\t\t\t\t<h3>フィルター設定</h3>\n\n\t\t\t\t<div class="filter-group">\n\t\t\t\t\t<label>タグで絞り込み</label>\n\t\t\t\t\t<div class="tag-filter" id="tag-filter">\n\t\t\t\t\t\t${c.getAllTags(this.allEntries).map(t=>`\n\t\t\t\t\t\t\t<label class="tag-checkbox">\n\t\t\t\t\t\t\t\t<input type="checkbox" value="${t}" ${this.selectedTags.has(t)?"checked":""}>\n\t\t\t\t\t\t\t\t<span>${t}</span>\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t`).join("")}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<div class="filter-group">\n\t\t\t\t\t<label>使用頻度で絞り込み（1=低頻度、5=高頻度）</label>\n\t\t\t\t\t<div class="frequency-filter" id="frequency-filter">\n\t\t\t\t\t\t${[5,4,3,2,1].map(t=>`\n\t\t\t\t\t\t\t<label class="frequency-checkbox">\n\t\t\t\t\t\t\t\t<input type="checkbox" value="${t}" ${this.selectedFrequencies.has(t)?"checked":""}>\n\t\t\t\t\t\t\t\t<span>★${t}</span>\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t`).join("")}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<div class="filter-group">\n\t\t\t\t\t<label for="search-input">検索（略語・意味・タグ）</label>\n\t\t\t\t\t<input type="text" id="search-input" class="search-input" placeholder="例: QTH, location, Q符号" value="${this.searchQuery}">\n\t\t\t\t</div>\n\n\t\t\t\t<div class="filter-stats">\n\t\t\t\t\t<span>該当: <strong id="filtered-count">${this.filteredEntries.length}</strong> 件</span>\n\t\t\t\t\t<span>全体: <strong>${this.allEntries.length}</strong> 件</span>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t`}renderBrowseMode(){const t=document.getElementById("app");t&&(t.innerHTML=`\n\t\t\t<div class="settings-icon" id="settingsIcon">\n\t\t\t\t<svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">\n\t\t\t\t\t<path d="M19.14,12.94c0.04-0.3,0.06-0.61,0.06-0.94c0-0.32-0.02-0.64-0.07-0.94l2.03-1.58c0.18-0.14,0.23-0.41,0.12-0.61 l-1.92-3.32c-0.12-0.22-0.37-0.29-0.59-0.22l-2.39,0.96c-0.5-0.38-1.03-0.7-1.62-0.94L14.4,2.81c-0.04-0.24-0.24-0.41-0.48-0.41 h-3.84c-0.24,0-0.43,0.17-0.47,0.41L9.25,5.35C8.66,5.59,8.12,5.92,7.63,6.29L5.24,5.33c-0.22-0.08-0.47,0-0.59,0.22L2.74,8.87 C2.62,9.08,2.66,9.34,2.86,9.48l2.03,1.58C4.84,11.36,4.8,11.69,4.8,12s0.02,0.64,0.07,0.94l-2.03,1.58 c-0.18,0.14-0.23,0.41-0.12,0.61l1.92,3.32c0.12,0.22,0.37,0.29,0.59,0.22l2.39-0.96c0.5,0.38,1.03,0.7,1.62,0.94l0.36,2.54 c0.05,0.24,0.24,0.41,0.48,0.41h3.84c0.24,0,0.44-0.17,0.47-0.41l0.36-2.54c0.59-0.24,1.13-0.56,1.62-0.94l2.39,0.96 c0.22,0.08,0.47,0,0.59-0.22l1.92-3.32c0.12-0.22,0.07-0.47-0.12-0.61L19.14,12.94z M12,15.6c-1.98,0-3.6-1.62-3.6-3.6 s1.62-3.6,3.6-3.6s3.6,1.62,3.6,3.6S13.98,15.6,12,15.6z"/>\n\t\t\t\t</svg>\n\t\t\t</div>\n\n\t\t\t<div class="container">\n\t\t\t\t<header class="header">\n\t\t\t\t\t<button class="back-btn">メニューに戻る</button>\n\t\t\t\t\t<h1>CW略語・Q符号学習</h1>\n\t\t\t\t</header>\n\n\t\t\t\t<div class="tabs">\n\t\t\t\t\t<button class="tab-button active" data-tab="browse">一覧</button>\n\t\t\t\t\t<button class="tab-button" data-tab="learn">学習モード</button>\n\t\t\t\t\t<button class="tab-button" data-tab="exam">試験モード</button>\n\t\t\t\t</div>\n\n\t\t\t\t<div class="flashcard-container">\n\t\t\t\t\t${this.renderFilterSection()}\n\n\t\t\t\t\t<div class="entries-section" id="entries-section">\n\t\t\t\t\t\t\x3c!-- ここに一覧が表示される --\x3e\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div class="instructions">\n\t\t\t\t\t\t<h3>使い方</h3>\n\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t<li>タグ、使用頻度、検索で略語を絞り込めます</li>\n\t\t\t\t\t\t\t<li>略語カードをクリックするとモールス信号を再生できます</li>\n\t\t\t\t\t\t\t<li>カード表示とリスト表示を切り替えられます</li>\n\t\t\t\t\t\t\t<li>「学習モード」タブでフラッシュカード学習ができます</li>\n\t\t\t\t\t\t\t<li>「試験モード」タブで理解度テストができます</li>\n\t\t\t\t\t\t\t<li>画面右上の⚙アイコンから音量・周波数・速度を調整できます</li>\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t`,this.renderEntries(),this.attachBrowseModeListeners())}renderEntries(){const t=document.getElementById("entries-section");t&&("card"===this.displayMode?this.renderCardView(t):this.renderListView(t))}renderCardView(t){t.innerHTML=`\n\t\t\t<div class="entries-header">\n\t\t\t\t<h3>略語一覧 (${this.filteredEntries.length}件)</h3>\n\t\t\t\t<button id="toggle-display-btn" class="toggle-display-btn">📋 リスト表示</button>\n\t\t\t</div>\n\t\t\t<div class="entries-grid">\n\t\t\t\t${this.filteredEntries.map(t=>`\n\t\t\t\t\t<div class="entry-card ${this.currentlyPlaying===t.abbreviation?"playing":""}" data-abbr="${t.abbreviation}">\n\t\t\t\t\t\t<div class="entry-header">\n\t\t\t\t\t\t\t<div class="entry-abbr">${this.formatAbbreviation(t.abbreviation)}</div>\n\t\t\t\t\t\t\t<div class="entry-frequency" title="使用頻度: ${t.frequency}/5">${"★".repeat(t.frequency)}${"☆".repeat(5-t.frequency)}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class="entry-english">${t.english}</div>\n\t\t\t\t\t\t<div class="entry-japanese">${t.japanese}</div>\n\t\t\t\t\t\t${t.description?`<div class="entry-description">${t.description}</div>`:""}\n\t\t\t\t\t\t${t.example?`<div class="entry-example">例: ${t.example}</div>`:""}\n\t\t\t\t\t\t<div class="entry-tags">${t.tags}</div>\n\t\t\t\t\t</div>\n\t\t\t\t`).join("")}\n\t\t\t</div>\n\t\t`,
//! カードクリックでモールス再生。
t.querySelectorAll(".entry-card").forEach(t=>{t.addEventListener("click",()=>{const e=t.getAttribute("data-abbr");e&&this.playMorse(e)})});
//! 表示モード切り替えボタン。
const e=document.getElementById("toggle-display-btn");e&&e.addEventListener("click",()=>{this.displayMode="list",d.saveDisplayMode(this.displayMode),this.renderEntries()})}renderListView(t){t.innerHTML=`\n\t\t\t<div class="entries-header">\n\t\t\t\t<h3>略語一覧 (${this.filteredEntries.length}件)</h3>\n\t\t\t\t<button id="toggle-display-btn" class="toggle-display-btn">🃏 カード表示</button>\n\t\t\t</div>\n\t\t\t<div class="list-table-container">\n\t\t\t\t<table class="list-table">\n\t\t\t\t\t<thead>\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<th class="sortable" data-column="abbreviation">略語${this.getSortIndicator("abbreviation")}</th>\n\t\t\t\t\t\t\t<th class="sortable" data-column="english">英文${this.getSortIndicator("english")}</th>\n\t\t\t\t\t\t\t<th class="sortable" data-column="japanese">和訳${this.getSortIndicator("japanese")}</th>\n\t\t\t\t\t\t\t<th class="sortable" data-column="frequency">頻度${this.getSortIndicator("frequency")}</th>\n\t\t\t\t\t\t\t<th class="sortable" data-column="tags">タグ${this.getSortIndicator("tags")}</th>\n\t\t\t\t\t\t\t<th>説明</th>\n\t\t\t\t\t\t\t<th>具体例</th>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t</thead>\n\t\t\t\t\t<tbody>\n\t\t\t\t\t\t${this.filteredEntries.map(t=>`\n\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t<td class="list-abbr">\n\t\t\t\t\t\t\t\t\t<button class="abbr-play-btn ${this.currentlyPlaying===t.abbreviation?"playing":""}" data-abbr="${t.abbreviation}">\n\t\t\t\t\t\t\t\t\t\t${this.formatAbbreviation(t.abbreviation)}\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t<td>${t.english}</td>\n\t\t\t\t\t\t\t\t<td>${t.japanese}</td>\n\t\t\t\t\t\t\t\t<td title="使用頻度: ${t.frequency}/5">${"★".repeat(t.frequency)}${"☆".repeat(5-t.frequency)}</td>\n\t\t\t\t\t\t\t\t<td>${t.tags}</td>\n\t\t\t\t\t\t\t\t<td>${t.description||""}</td>\n\t\t\t\t\t\t\t\t<td>${t.example||""}</td>\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t`).join("")}\n\t\t\t\t\t</tbody>\n\t\t\t\t</table>\n\t\t\t</div>\n\t\t`;t.querySelectorAll("th.sortable").forEach(t=>{t.addEventListener("click",()=>{const e=t.getAttribute("data-column");e&&this.toggleSort(e)})});t.querySelectorAll(".abbr-play-btn").forEach(t=>{t.addEventListener("click",()=>{const e=t.getAttribute("data-abbr");e&&this.playMorse(e)})});
//! 表示モード切り替えボタン。
const e=document.getElementById("toggle-display-btn");e&&e.addEventListener("click",()=>{this.displayMode="card",d.saveDisplayMode(this.displayMode),this.renderEntries()})}renderLearnMode(){0===this.learnCards.length?
//! セットアップ画面を表示。
this.renderLearnSetup():
//! 学習カードを表示。
this.renderLearnCard()}renderLearnSetup(){const t=document.getElementById("app");if(!t)return;
//! カード枚数を計算。
let e=this.filteredEntries.length;this.reviewMode&&(e=this.filteredEntries.filter(t=>this.progress.unknown.has(t.abbreviation)).length),t.innerHTML=`\n\t\t\t<div class="settings-icon" id="settingsIcon">\n\t\t\t\t<svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">\n\t\t\t\t\t<path d="M19.14,12.94c0.04-0.3,0.06-0.61,0.06-0.94c0-0.32-0.02-0.64-0.07-0.94l2.03-1.58c0.18-0.14,0.23-0.41,0.12-0.61 l-1.92-3.32c-0.12-0.22-0.37-0.29-0.59-0.22l-2.39,0.96c-0.5-0.38-1.03-0.7-1.62-0.94L14.4,2.81c-0.04-0.24-0.24-0.41-0.48-0.41 h-3.84c-0.24,0-0.43,0.17-0.47,0.41L9.25,5.35C8.66,5.59,8.12,5.92,7.63,6.29L5.24,5.33c-0.22-0.08-0.47,0-0.59,0.22L2.74,8.87 C2.62,9.08,2.66,9.34,2.86,9.48l2.03,1.58C4.84,11.36,4.8,11.69,4.8,12s0.02,0.64,0.07,0.94l-2.03,1.58 c-0.18,0.14-0.23,0.41-0.12,0.61l1.92,3.32c0.12,0.22,0.37,0.29,0.59,0.22l2.39-0.96c0.5,0.38,1.03,0.7,1.62,0.94l0.36,2.54 c0.05,0.24,0.24,0.41,0.48,0.41h3.84c0.24,0,0.44-0.17,0.47-0.41l0.36-2.54c0.59-0.24,1.13-0.56,1.62-0.94l2.39,0.96 c0.22,0.08,0.47,0,0.59-0.22l1.92-3.32c0.12-0.22,0.07-0.47-0.12-0.61L19.14,12.94z M12,15.6c-1.98,0-3.6-1.62-3.6-3.6 s1.62-3.6,3.6-3.6s3.6,1.62,3.6,3.6S13.98,15.6,12,15.6z"/>\n\t\t\t\t</svg>\n\t\t\t</div>\n\n\t\t\t<div class="container">\n\t\t\t\t<header class="header">\n\t\t\t\t\t<button class="back-btn">メニューに戻る</button>\n\t\t\t\t\t<h1>CW略語・Q符号学習</h1>\n\t\t\t\t</header>\n\n\t\t\t\t<div class="tabs">\n\t\t\t\t\t<button class="tab-button" data-tab="browse">一覧</button>\n\t\t\t\t\t<button class="tab-button active" data-tab="learn">学習モード</button>\n\t\t\t\t\t<button class="tab-button" data-tab="exam">試験モード</button>\n\t\t\t\t</div>\n\n\t\t\t\t<div class="flashcard-container">\n\t\t\t\t\t${this.renderFilterSection()}\n\n\t\t\t\t\t<div class="learn-setup-section">\n\t\t\t\t\t\t<h3>学習設定</h3>\n\n\t\t\t\t\t\t<div class="filter-group">\n\t\t\t\t\t\t\t<label>モード</label>\n\t\t\t\t\t\t\t<div class="mode-buttons">\n\t\t\t\t\t\t\t\t<button class="mode-btn ${this.reviewMode?"active":""}" id="review-mode-btn">\n\t\t\t\t\t\t\t\t\t復習モード（わからないカードのみ: ${this.progress.unknown.size}件）\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div class="filter-group">\n\t\t\t\t\t\t\t<label>出題形式</label>\n\t\t\t\t\t\t\t<div class="question-type-buttons">\n\t\t\t\t\t\t\t\t<button class="question-type-btn ${"abbr-to-meaning"===this.learnQuestionType?"active":""}" data-type="abbr-to-meaning">略語→意味（基本）</button>\n\t\t\t\t\t\t\t\t<button class="question-type-btn ${"meaning-to-abbr"===this.learnQuestionType?"active":""}" data-type="meaning-to-abbr">意味→略語（応用）</button>\n\t\t\t\t\t\t\t\t<button class="question-type-btn ${"morse-to-abbr"===this.learnQuestionType?"active":""}" data-type="morse-to-abbr">モールス音→略語（実践）</button>\n\t\t\t\t\t\t\t\t<button class="question-type-btn ${"morse-to-meaning"===this.learnQuestionType?"active":""}" data-type="morse-to-meaning">モールス音→意味（実践）</button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div class="filter-stats">\n\t\t\t\t\t\t\t<span>学習可能: <strong>${e}</strong> 枚</span>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div class="action-area">\n\t\t\t\t\t\t\t<button class="btn btn-large btn-primary" id="start-learn-btn" ${0===e?"disabled":""}>学習開始</button>\n\t\t\t\t\t\t\t<button class="btn btn-large btn-secondary" id="clear-progress-btn">進捗をリセット</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div class="instructions">\n\t\t\t\t\t\t<h3>使い方</h3>\n\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t<li>フィルターで学習する略語を絞り込みます</li>\n\t\t\t\t\t\t\t<li>出題形式を選択します（略語→意味、意味→略語、モールス音からの解読）</li>\n\t\t\t\t\t\t\t<li>カードをクリックで裏返し、「わかる」「わからない」で進捗を記録</li>\n\t\t\t\t\t\t\t<li>復習モードで「わからない」カードのみを学習できます</li>\n\t\t\t\t\t\t\t<li>学習進捗はブラウザに自動保存されます</li>\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t`,this.attachCommonListeners(),this.attachLearnSetupListeners()}attachLearnSetupListeners(){
//! タグフィルター。
const t=document.getElementById("tag-filter");t?.addEventListener("change",t=>{const e=t.target;"checkbox"===e.type&&(e.checked?this.selectedTags.add(e.value):this.selectedTags.delete(e.value),this.updateFilteredEntries(),this.renderLearnSetup())});
//! 使用頻度フィルター。
const e=document.getElementById("frequency-filter");e?.addEventListener("change",t=>{const e=t.target;if("checkbox"===e.type){const t=parseInt(e.value,10);e.checked?this.selectedFrequencies.add(t):this.selectedFrequencies.delete(t),this.updateFilteredEntries(),this.renderLearnSetup()}});
//! 検索。
const n=document.getElementById("learn-search-input");n?.addEventListener("input",()=>{this.searchQuery=n.value,this.updateFilteredEntries(),this.renderLearnSetup()});
//! 復習モードボタン。
const s=document.getElementById("review-mode-btn");s?.addEventListener("click",()=>{this.reviewMode=!this.reviewMode,this.renderLearnSetup()});document.querySelectorAll(".question-type-btn").forEach(t=>{t.addEventListener("click",()=>{const e=t.getAttribute("data-type");e&&(this.learnQuestionType=e,d.saveLearnQuestionType(this.learnQuestionType),this.renderLearnSetup())})});
//! 学習開始ボタン。
const i=document.getElementById("start-learn-btn");i?.addEventListener("click",()=>{this.startLearn()});
//! 進捗リセットボタン。
const a=document.getElementById("clear-progress-btn");a?.addEventListener("click",()=>{confirm("学習進捗をリセットしますか？")&&(this.clearProgress(),this.renderLearnSetup())})}startLearn(){
//! フィルタリング済みのエントリーから学習カードを作成。
let t=[...this.filteredEntries];this.reviewMode&&(
//! 復習モード: わからないカードのみ。
t=t.filter(t=>this.progress.unknown.has(t.abbreviation))),0!==t.length?(
//! シャッフル。
t=t.sort(()=>Math.random()-.5),this.learnCards=t,this.currentLearnIndex=0,this.isFlipped=!1,this.renderLearnCard()):alert("学習可能なカードがありません。")}renderLearnCard(){const t=document.getElementById("app");if(!t)return;const e=this.learnCards[this.currentLearnIndex],n=this.currentLearnIndex+1,s=this.learnCards.length;
//! 問題と正解のコンテンツを生成。
let i="",a="";switch(this.learnQuestionType){case"abbr-to-meaning":i=`\n\t\t\t\t\t<div class="card-label">略語</div>\n\t\t\t\t\t<div class="card-content-abbr">${this.formatAbbreviation(e.abbreviation)}</div>\n\t\t\t\t`,a=`\n\t\t\t\t\t<div class="card-label">意味</div>\n\t\t\t\t\t<div class="card-content-text">${e.english}</div>\n\t\t\t\t\t<div class="card-content-text">${e.japanese}</div>\n\t\t\t\t`;break;case"meaning-to-abbr":i=`\n\t\t\t\t\t<div class="card-label">意味</div>\n\t\t\t\t\t<div class="card-content-text">${e.english}</div>\n\t\t\t\t\t<div class="card-content-text">${e.japanese}</div>\n\t\t\t\t`,a=`\n\t\t\t\t\t<div class="card-label">略語</div>\n\t\t\t\t\t<div class="card-content-abbr">${this.formatAbbreviation(e.abbreviation)}</div>\n\t\t\t\t`;break;case"morse-to-abbr":i='\n\t\t\t\t\t<div class="card-label">モールス音を聞いて略語を答えてください</div>\n\t\t\t\t\t<button class="play-morse-btn" id="play-morse-btn">🔊 モールス再生</button>\n\t\t\t\t',a=`\n\t\t\t\t\t<div class="card-label">略語</div>\n\t\t\t\t\t<div class="card-content-abbr">${this.formatAbbreviation(e.abbreviation)}</div>\n\t\t\t\t`;break;case"morse-to-meaning":i='\n\t\t\t\t\t<div class="card-label">モールス音を聞いて意味を答えてください</div>\n\t\t\t\t\t<button class="play-morse-btn" id="play-morse-btn">🔊 モールス再生</button>\n\t\t\t\t',a=`\n\t\t\t\t\t<div class="card-label">意味</div>\n\t\t\t\t\t<div class="card-content-abbr">${this.formatAbbreviation(e.abbreviation)}</div>\n\t\t\t\t\t<div class="card-content-text">${e.english}</div>\n\t\t\t\t\t<div class="card-content-text">${e.japanese}</div>\n\t\t\t\t`}
//! 判定ボタンのHTML。
const r=this.progress.known.has(e.abbreviation),o=`\n\t\t\t<div class="judgment-controls">\n\t\t\t\t<button id="mark-unknown-btn" class="judgment-button unknown ${this.progress.unknown.has(e.abbreviation)?"active":""}">\n\t\t\t\t\t× わからない\n\t\t\t\t</button>\n\t\t\t\t<button id="mark-known-btn" class="judgment-button known ${r?"active":""}">\n\t\t\t\t\t○ わかる\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t`;t.innerHTML=`\n\t\t\t<div class="container learning-view">\n\t\t\t\t<div class="learning-header">\n\t\t\t\t\t<button id="back-to-setup-btn" class="back-btn">← 設定に戻る</button>\n\t\t\t\t\t<div class="progress-indicator">${n} / ${s}</div>\n\t\t\t\t</div>\n\n\t\t\t\t<div class="card-container">\n\t\t\t\t\t<div class="flashcard ${this.isFlipped?"flipped":""}" id="flashcard">\n\t\t\t\t\t\t<div class="card-front">\n\t\t\t\t\t\t\t${i}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class="card-back">\n\t\t\t\t\t\t\t${a}\n\t\t\t\t\t\t\t${e.description?`<div class="card-description">${e.description}</div>`:""}\n\t\t\t\t\t\t\t${e.example?`<div class="card-example">例: ${e.example}</div>`:""}\n\t\t\t\t\t\t\t<div class="card-tags">${e.tags} / ${"★".repeat(e.frequency)}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<div class="card-controls">\n\t\t\t\t\t<button id="flip-card-btn" class="control-button">\n\t\t\t\t\t\t${this.isFlipped?"問題に戻る":"正解を確認する"} (Space)\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\n\t\t\t\t${this.isFlipped?o:""}\n\n\t\t\t\t<div class="navigation-controls">\n\t\t\t\t\t<button id="prev-card-btn" class="nav-button" ${0===this.currentLearnIndex?"disabled":""}>\n\t\t\t\t\t\t← 前のカード\n\t\t\t\t\t</button>\n\t\t\t\t\t<button id="next-card-btn" class="nav-button" ${this.currentLearnIndex>=this.learnCards.length-1?"disabled":""}>\n\t\t\t\t\t\t次のカード →\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t`,this.attachLearnCardListeners()}attachLearnCardListeners(){
//! 設定に戻るボタン。
const t=document.getElementById("back-to-setup-btn");t?.addEventListener("click",()=>{this.learnCards=[],this.currentLearnIndex=0,this.isFlipped=!1,this.renderLearnSetup()});
//! フリップボタン。
const e=document.getElementById("flip-card-btn");e?.addEventListener("click",()=>{this.isFlipped=!this.isFlipped,this.renderLearnCard()});document.addEventListener("keydown",t=>{"Space"===t.code&&t.target===document.body&&(t.preventDefault(),this.isFlipped=!this.isFlipped,this.renderLearnCard())});
//! モールス再生ボタン。
const n=document.getElementById("play-morse-btn");n&&n.addEventListener("click",()=>{const t=this.learnCards[this.currentLearnIndex];this.playMorse(t.abbreviation)});
//! 判定ボタン（わからない）。
const s=document.getElementById("mark-unknown-btn");s?.addEventListener("click",()=>{const t=this.learnCards[this.currentLearnIndex];this.progress.unknown.add(t.abbreviation),this.progress.known.delete(t.abbreviation),this.saveProgress(),this.moveToNextCard()});
//! 判定ボタン（わかる）。
const i=document.getElementById("mark-known-btn");i?.addEventListener("click",()=>{const t=this.learnCards[this.currentLearnIndex];this.progress.known.add(t.abbreviation),this.progress.unknown.delete(t.abbreviation),this.saveProgress(),this.moveToNextCard()});
//! 前のカードボタン。
const a=document.getElementById("prev-card-btn");a?.addEventListener("click",()=>{this.currentLearnIndex>0&&(this.currentLearnIndex--,this.isFlipped=!1,this.renderLearnCard())});
//! 次のカードボタン。
const r=document.getElementById("next-card-btn");r?.addEventListener("click",()=>{this.currentLearnIndex<this.learnCards.length-1&&(this.currentLearnIndex++,this.isFlipped=!1,this.renderLearnCard())})}moveToNextCard(){this.currentLearnIndex<this.learnCards.length-1?(
//! 次のカードがあれば移動。
this.currentLearnIndex++,this.isFlipped=!1,this.renderLearnCard()):(
//! 最後のカードの場合は学習完了。
alert("学習完了しました！"),this.learnCards=[],this.currentLearnIndex=0,this.isFlipped=!1,this.renderLearnSetup())}renderExamMode(){document.getElementById("app")&&(0===this.questions.length?this.renderExamSetup():this.renderExamQuestion())}renderExamSetup(){const t=document.getElementById("app");t&&(t.innerHTML=`\n\t\t\t<div class="settings-icon" id="settingsIcon">\n\t\t\t\t<svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">\n\t\t\t\t\t<path d="M19.14,12.94c0.04-0.3,0.06-0.61,0.06-0.94c0-0.32-0.02-0.64-0.07-0.94l2.03-1.58c0.18-0.14,0.23-0.41,0.12-0.61 l-1.92-3.32c-0.12-0.22-0.37-0.29-0.59-0.22l-2.39,0.96c-0.5-0.38-1.03-0.7-1.62-0.94L14.4,2.81c-0.04-0.24-0.24-0.41-0.48-0.41 h-3.84c-0.24,0-0.43,0.17-0.47,0.41L9.25,5.35C8.66,5.59,8.12,5.92,7.63,6.29L5.24,5.33c-0.22-0.08-0.47,0-0.59,0.22L2.74,8.87 C2.62,9.08,2.66,9.34,2.86,9.48l2.03,1.58C4.84,11.36,4.8,11.69,4.8,12s0.02,0.64,0.07,0.94l-2.03,1.58 c-0.18,0.14-0.23,0.41-0.12,0.61l1.92,3.32c0.12,0.22,0.37,0.29,0.59,0.22l2.39-0.96c0.5,0.38,1.03,0.7,1.62,0.94l0.36,2.54 c0.05,0.24,0.24,0.41,0.48,0.41h3.84c0.24,0,0.44-0.17,0.47-0.41l0.36-2.54c0.59-0.24,1.13-0.56,1.62-0.94l2.39,0.96 c0.22,0.08,0.47,0,0.59-0.22l1.92-3.32c0.12-0.22,0.07-0.47-0.12-0.61L19.14,12.94z M12,15.6c-1.98,0-3.6-1.62-3.6-3.6 s1.62-3.6,3.6-3.6s3.6,1.62,3.6,3.6S13.98,15.6,12,15.6z"/>\n\t\t\t\t</svg>\n\t\t\t</div>\n\n\t\t\t<div class="container">\n\t\t\t\t<header class="header">\n\t\t\t\t\t<button class="back-btn">メニューに戻る</button>\n\t\t\t\t\t<h1>CW略語・Q符号学習</h1>\n\t\t\t\t</header>\n\n\t\t\t\t<div class="tabs">\n\t\t\t\t\t<button class="tab-button" data-tab="browse">一覧</button>\n\t\t\t\t\t<button class="tab-button" data-tab="learn">学習モード</button>\n\t\t\t\t\t<button class="tab-button active" data-tab="exam">試験モード</button>\n\t\t\t\t</div>\n\n\t\t\t\t<div class="flashcard-container">\n\t\t\t\t\t${this.renderFilterSection()}\n\n\t\t\t\t\t<div class="exam-setup-section">\n\t\t\t\t\t\t<h3>出題形式</h3>\n\t\t\t\t\t\t<div class="question-type-buttons">\n\t\t\t\t\t\t\t<button class="question-type-btn ${"abbr-to-meaning"===this.questionType?"active":""}" data-type="abbr-to-meaning">略語→意味（基礎）</button>\n\t\t\t\t\t\t\t<button class="question-type-btn ${"meaning-to-abbr"===this.questionType?"active":""}" data-type="meaning-to-abbr">意味→略語（応用）</button>\n\t\t\t\t\t\t\t<button class="question-type-btn ${"morse-to-abbr"===this.questionType?"active":""}" data-type="morse-to-abbr">モールス音→略語（実践）</button>\n\t\t\t\t\t\t\t<button class="question-type-btn ${"morse-to-meaning"===this.questionType?"active":""}" data-type="morse-to-meaning">モールス音→意味（実践）</button>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<h3>問題数</h3>\n\t\t\t\t\t\t<div class="question-count-buttons">\n\t\t\t\t\t\t\t<button class="question-count-btn ${5===this.questionCount?"active":""}" data-count="5">5問</button>\n\t\t\t\t\t\t\t<button class="question-count-btn ${10===this.questionCount?"active":""}" data-count="10">10問</button>\n\t\t\t\t\t\t\t<button class="question-count-btn ${20===this.questionCount?"active":""}" data-count="20">20問</button>\n\t\t\t\t\t\t\t<button class="question-count-btn ${50===this.questionCount?"active":""}" data-count="50">50問</button>\n\t\t\t\t\t\t\t<button class="question-count-btn ${"all"===this.questionCount?"active":""}" data-count="all">全問</button>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div class="action-area">\n\t\t\t\t\t\t\t<button class="btn btn-large btn-primary" id="start-exam-btn">試験開始</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div class="instructions">\n\t\t\t\t\t\t<h3>使い方</h3>\n\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t<li>フィルターで出題範囲を絞り込みます</li>\n\t\t\t\t\t\t\t<li>出題形式を選択します（略語→意味、意味→略語、モールス音から）</li>\n\t\t\t\t\t\t\t<li>問題数を選択します（5問〜全問）</li>\n\t\t\t\t\t\t\t<li>4つの選択肢から正解を選びます</li>\n\t\t\t\t\t\t\t<li>80%以上で合格です</li>\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t`,this.attachExamSetupListeners())}renderExamQuestion(){const t=document.getElementById("app");if(!t)return;const e=this.questions[this.currentQuestionIndex],n=this.currentQuestionIndex+1,s=this.questions.length;let i="";switch(e.type){case"abbr-to-meaning":i=`次の略語の意味は？<br><strong class="question-text">${e.entry.abbreviation}</strong>`;break;case"meaning-to-abbr":i=`次の意味を表す略語は？<br><strong class="question-text">${e.entry.english} / ${e.entry.japanese}</strong>`;break;case"morse-to-abbr":i='モールス音を聞いて、対応する略語は？<br><button id="replay-morse-btn" class="btn btn-secondary">🔊 もう一度再生</button>';break;case"morse-to-meaning":i='モールス音を聞いて、対応する意味は？<br><button id="replay-morse-btn" class="btn btn-secondary">🔊 もう一度再生</button>'}t.innerHTML=`\n\t\t\t<div class="container">\n\t\t\t\t<header class="header">\n\t\t\t\t\t<h1>CW略語・Q符号学習 - 試験中</h1>\n\t\t\t\t\t<button class="back-btn">中断</button>\n\t\t\t\t</header>\n\n\t\t\t\t<div class="exam-container">\n\t\t\t\t\t<div class="exam-progress">\n\t\t\t\t\t\t<span>問題 <strong>${n}</strong> / ${s}</span>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div class="question-area">\n\t\t\t\t\t\t<p class="question">${i}</p>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div class="choices-area">\n\t\t\t\t\t\t${e.choices.map((t,e)=>`\n\t\t\t\t\t\t\t<button class="choice-btn" data-choice="${t}">\n\t\t\t\t\t\t\t\t${e+1}. ${t}\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t`).join("")}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t`,this.attachExamQuestionListeners(),
//! モールス音が必要な場合は自動再生。
"morse-to-abbr"!==e.type&&"morse-to-meaning"!==e.type||setTimeout(()=>this.playMorse(e.entry.abbreviation),500)}renderExamResultMode(){const t=document.getElementById("app");if(!t)return;const e=c.calculateScore(this.results),n=c.isPassed(e.percentage),s=c.getWrongAnswers(this.results);t.innerHTML=`\n\t\t\t<div class="container">\n\t\t\t\t<header class="header">\n\t\t\t\t\t<h1>CW略語・Q符号学習 - 結果</h1>\n\t\t\t\t\t<button class="back-btn">メニューに戻る</button>\n\t\t\t\t</header>\n\n\t\t\t\t<div class="result-container">\n\t\t\t\t\t<div class="score-area ${n?"passed":"failed"}">\n\t\t\t\t\t\t<h2>${n?"合格！":"不合格"}</h2>\n\t\t\t\t\t\t<div class="score-display">\n\t\t\t\t\t\t\t<span class="score-percentage">${e.percentage}%</span>\n\t\t\t\t\t\t\t<span class="score-detail">${e.correct} / ${e.total} 問正解</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t${s.length>0?`\n\t\t\t\t\t\t<div class="wrong-answers-section">\n\t\t\t\t\t\t\t<h3>間違えた問題（${s.length}件）</h3>\n\t\t\t\t\t\t\t<div class="wrong-answers-list">\n\t\t\t\t\t\t\t\t${this.results.filter(t=>!t.isCorrect).map(t=>`\n\t\t\t\t\t\t\t\t\t<div class="wrong-answer-item">\n\t\t\t\t\t\t\t\t\t\t<div class="wrong-answer-question">\n\t\t\t\t\t\t\t\t\t\t\t<strong>${t.question.entry.abbreviation}</strong>\n\t\t\t\t\t\t\t\t\t\t\t<span>${t.question.entry.english} / ${t.question.entry.japanese}</span>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div class="wrong-answer-detail">\n\t\t\t\t\t\t\t\t\t\t\t<span class="wrong-label">あなたの回答:</span>\n\t\t\t\t\t\t\t\t\t\t\t<span class="wrong-user-answer">${t.userAnswer}</span>\n\t\t\t\t\t\t\t\t\t\t\t<span class="correct-label">正解:</span>\n\t\t\t\t\t\t\t\t\t\t\t<span class="correct-answer">${t.question.correctAnswer}</span>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t${t.question.entry.description?`\n\t\t\t\t\t\t\t\t\t\t\t<div class="wrong-answer-description">\n\t\t\t\t\t\t\t\t\t\t\t\t${t.question.entry.description}\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t`:""}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t`).join("")}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t`:'\n\t\t\t\t\t\t<div class="perfect-score">\n\t\t\t\t\t\t\t<p>すべて正解しました！</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t'}\n\n\t\t\t\t\t<div class="action-area">\n\t\t\t\t\t\t<button class="btn btn-primary btn-large" id="retry-btn">もう一度</button>\n\t\t\t\t\t\t<button class="btn btn-secondary btn-large" id="back-to-setup-btn">設定に戻る</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t`,this.attachResultListeners()}attachBrowseModeListeners(){this.attachCommonListeners();
//! タグフィルター。
const t=document.getElementById("tag-filter");t?.addEventListener("change",t=>{const e=t.target;"checkbox"===e.type&&(e.checked?this.selectedTags.add(e.value):this.selectedTags.delete(e.value),this.saveFilters(),this.updateFilteredEntries(),this.updateFilteredCount(),this.renderEntries())});
//! 使用頻度フィルター。
const e=document.getElementById("frequency-filter");e?.addEventListener("change",t=>{const e=t.target;if("checkbox"===e.type){const t=parseInt(e.value,10);e.checked?this.selectedFrequencies.add(t):this.selectedFrequencies.delete(t),this.saveFilters(),this.updateFilteredEntries(),this.updateFilteredCount(),this.renderEntries()}});
//! 検索。
const n=document.getElementById("search-input");n?.addEventListener("input",()=>{this.searchQuery=n.value,this.saveFilters(),this.updateFilteredEntries(),this.updateFilteredCount(),this.renderEntries()})}attachExamSetupListeners(){this.attachCommonListeners();
//! タグフィルター。
const t=document.getElementById("tag-filter");t?.addEventListener("change",t=>{const e=t.target;"checkbox"===e.type&&(e.checked?this.selectedTags.add(e.value):this.selectedTags.delete(e.value),this.saveFilters(),this.updateFilteredEntries(),this.updateFilteredCount())});
//! 使用頻度フィルター。
const e=document.getElementById("frequency-filter");e?.addEventListener("change",t=>{const e=t.target;if("checkbox"===e.type){const t=parseInt(e.value,10);e.checked?this.selectedFrequencies.add(t):this.selectedFrequencies.delete(t),this.saveFilters(),this.updateFilteredEntries(),this.updateFilteredCount()}});
//! 検索。
const n=document.getElementById("search-input");n?.addEventListener("input",()=>{this.searchQuery=n.value,this.saveFilters(),this.updateFilteredEntries(),this.updateFilteredCount()});document.querySelectorAll(".question-type-btn").forEach(t=>{t.addEventListener("click",()=>{const e=t.getAttribute("data-type");e&&(this.questionType=e,d.saveExamQuestionType(this.questionType),this.renderExamSetup())})});document.querySelectorAll(".question-count-btn").forEach(t=>{t.addEventListener("click",()=>{const e=t.getAttribute("data-count");e&&(this.questionCount="all"===e?"all":parseInt(e,10),this.renderExamSetup())})});
//! 試験開始ボタン。
const s=document.getElementById("start-exam-btn");s?.addEventListener("click",()=>{this.startExam()})}attachExamQuestionListeners(){
//! 中断ボタン。
const t=document.querySelector(".back-btn");t?.addEventListener("click",()=>{confirm("試験を中断してメニューに戻りますか？")&&(window.location.hash="#menu")});
//! モールス再生ボタン。
const e=document.getElementById("replay-morse-btn");if(e){const t=this.questions[this.currentQuestionIndex];e.addEventListener("click",()=>{this.playMorse(t.entry.abbreviation)})}
//! 選択肢ボタン。
document.querySelectorAll(".choice-btn").forEach(t=>{t.addEventListener("click",t=>{const e=t.currentTarget.dataset.choice||"";this.handleAnswer(e)})})}attachResultListeners(){
//! 戻るボタン。
const t=document.querySelector(".back-btn");t?.addEventListener("click",()=>{window.location.hash="#menu"});
//! もう一度ボタン。
const e=document.getElementById("retry-btn");e?.addEventListener("click",()=>{this.questions=[],this.results=[],this.currentQuestionIndex=0,this.currentState="exam",this.render()});
//! 設定に戻るボタン。
const n=document.getElementById("back-to-setup-btn");n?.addEventListener("click",()=>{this.questions=[],this.results=[],this.currentQuestionIndex=0,this.currentState="exam",this.render()})}attachCommonListeners(){
//! 戻るボタン。
const t=document.querySelector(".back-btn");t?.addEventListener("click",()=>{window.location.hash="#menu"}),
//! 設定アイコン。
document.getElementById("settingsIcon")?.addEventListener("click",()=>{this.openSettingsModal()});document.querySelectorAll(".tab-button").forEach(t=>{t.addEventListener("click",()=>{const e=t.getAttribute("data-tab");"browse"===e?(this.currentState="browse",d.saveViewMode("browse"),this.render()):"learn"===e?(this.currentState="learn",d.saveViewMode("learn"),this.render()):"exam"===e&&(this.questions=[],this.results=[],this.currentQuestionIndex=0,this.currentState="exam",d.saveViewMode("exam"),this.render())})})}updateFilteredCount(){const t=document.getElementById("filtered-count");t&&(t.textContent=this.filteredEntries.length.toString());
//! 問題数の最大値も更新（試験モードの場合）。
const e=document.getElementById("question-count");e&&(e.max=this.filteredEntries.length.toString(),parseInt(e.value,10)>this.filteredEntries.length&&(e.value=this.filteredEntries.length.toString(),this.questionCount=this.filteredEntries.length))}updateFilteredEntries(){let t=this.allEntries;
//! タグでフィルタリング。
t=c.filterByTags(t,this.selectedTags),
//! 使用頻度でフィルタリング。
t=c.filterByFrequencies(t,this.selectedFrequencies),
//! 検索クエリでフィルタリング。
t=c.filterByQuery(t,this.searchQuery),
//! ソート適用。
this.filteredEntries=this.sortEntries(t)}sortEntries(t){const e="asc"===this.sortDirection;switch(this.sortColumn){case"abbreviation":return c.sortByAbbreviation(t,e);case"english":return c.sortByEnglish(t,e);case"japanese":return c.sortByJapanese(t,e);case"frequency":return c.sortByFrequency(t,e);case"tags":return c.sortByTags(t,e);default:return t}}toggleSort(t){this.sortColumn===t?
//! 同じ列なら方向を反転。
this.sortDirection="asc"===this.sortDirection?"desc":"asc":(
//! 異なる列なら昇順で開始。
this.sortColumn=t,this.sortDirection="asc"),
//! ソート状態を保存。
d.saveSortState(this.sortColumn,this.sortDirection),this.updateFilteredEntries(),this.renderEntries()}getSortIndicator(t){return this.sortColumn!==t?"":"asc"===this.sortDirection?" ▲":" ▼"}formatAbbreviation(t){const e=t.match(/^\[([A-Z]+)\]$/);return e?`<span class="prosign">${e[1]}</span>`:t}async playMorse(t){try{
//! 既に再生中の場合は停止。
if(this.currentlyPlaying===t)return this.audio.stopContinuousTone(),this.currentlyPlaying=null,void this.renderEntries();
//! 別のものが再生中なら停止。
this.currentlyPlaying&&this.audio.stopContinuousTone(),this.currentlyPlaying=t,this.renderEntries();
//! モールス符号に変換。
const e=l.textToMorse(t);if(e)
//! シンプルな再生実装（scheduleToneを使用）。
for(const t of e)"."===t?(this.audio.scheduleTone(0,60),await new Promise(t=>setTimeout(t,120))):"-"===t?(this.audio.scheduleTone(0,180),await new Promise(t=>setTimeout(t,240))):" "===t&&await new Promise(t=>setTimeout(t,60));this.currentlyPlaying=null,this.renderEntries()}catch(e){this.currentlyPlaying=null,this.renderEntries()}}startExam(){if(0===this.filteredEntries.length)return void alert("該当するエントリーがありません。フィルターを調整してください。");const t="all"===this.questionCount?this.filteredEntries.length:this.questionCount,e=Math.min(t,this.filteredEntries.length);0!==e?(
//! 問題を生成。
this.questions=c.generateExamQuestions(this.filteredEntries,this.questionType,e),this.currentQuestionIndex=0,this.results=[],this.render()):alert("問題数を1以上に設定してください。")}handleAnswer(t){const e=this.questions[this.currentQuestionIndex],n=c.checkAnswer(e,t);
//! 結果を記録。
this.results.push({question:e,userAnswer:t,isCorrect:n}),
//! 次の問題に進むか結果表示。
this.currentQuestionIndex++,this.currentQuestionIndex<this.questions.length||(this.currentState="exam-result"),this.render()}openSettingsModal(){
//! 現在の設定値を取得（0-100の範囲に変換）。
const t={volume:Math.round(100*this.audio.getVolume()),frequency:this.audio.getFrequency(),wpm:this.audio.getWPM()},e={volume:this.audio.getVolume(),frequency:this.audio.getFrequency(),wpm:this.audio.getWPM()};
//! 設定変更前の値を保存（キャンセル時の復元用）。
//! モーダルを表示。
new a("flashcard-settings-modal",r,t,{onSave:t=>{
//! 設定を保存。
this.audio.setVolume(t.volume/100),this.audio.setFrequency(t.frequency),this.audio.setWPM(t.wpm)},onCancel:()=>{
//! 設定を元に戻す。
this.audio.setVolume(e.volume),this.audio.setFrequency(e.frequency),this.audio.setWPM(e.wpm)},onTestPlay:async()=>{
//! テスト再生。
await this.playMorse("CQ")}}).show("flashcard")}destroy(){
//! 音声を停止。
this.currentlyPlaying&&this.audio.stopContinuousTone()}}const f={characterSpeed:20,effectiveSpeed:15,frequency:700,volume:.7,practiceDuration:60,groupSize:5,showInput:!0};class w{audio;viewMode="learning";settings={...f};state={currentLesson:1,isPlaying:!1,userInput:"",correctAnswer:"",groups:[],currentGroupIndex:0};customState={selectedChars:new Set,isCustomRunning:!1,customUserInput:"",customCorrectAnswer:"",customGroups:[],customCurrentGroupIndex:0,customIsPlaying:!1};constructor(){
//! 設定を読み込む。
this.loadSettings(),this.loadProgress(),this.loadViewMode(),this.loadSelectedChars(),
//! AudioGeneratorを初期化。
this.audio=new n({frequency:this.settings.frequency,volume:this.settings.volume,wpm:this.settings.characterSpeed,effectiveWpm:this.settings.effectiveSpeed})}
//! ========== 設定管理 ==========
loadSettings(){try{const t=localStorage.getItem("v10.koch.settings");t&&(this.settings={...f,...JSON.parse(t)})}catch(t){}}saveSettings(){try{localStorage.setItem("v10.koch.settings",JSON.stringify(this.settings))}catch(t){}}loadProgress(){try{const t=localStorage.getItem("v10.koch.currentLesson");t&&(this.state.currentLesson=parseInt(t,10))}catch(t){}}saveProgress(){try{localStorage.setItem("v10.koch.currentLesson",this.state.currentLesson.toString())}catch(t){}}loadViewMode(){try{const t=localStorage.getItem("v10.koch.viewMode");t&&["learning","custom"].includes(t)&&(this.viewMode=t)}catch(t){}}saveViewMode(){try{localStorage.setItem("v10.koch.viewMode",this.viewMode)}catch(t){}}loadSelectedChars(){try{const t=localStorage.getItem("v10.koch.selectedChars");if(t){const e=JSON.parse(t);this.customState.selectedChars=new Set(e)}}catch(t){}}saveSelectedChars(){try{const t=Array.from(this.customState.selectedChars);localStorage.setItem("v10.koch.selectedChars",JSON.stringify(t))}catch(t){}}
//! ========== レッスン管理 ==========
async startLesson(){const t=u.getCharsForLesson(this.state.currentLesson),e={groupSize:this.settings.groupSize,duration:this.settings.practiceDuration,wpm:this.settings.characterSpeed};this.state.groups=u.generateRandomGroups(t,e),this.state.currentGroupIndex=0,this.state.userInput="",this.state.correctAnswer=this.state.groups.join(""),this.state.isPlaying=!1,
//! AudioGeneratorの設定を更新。
this.audio.updateSettings({frequency:this.settings.frequency,volume:this.settings.volume,wpm:this.settings.characterSpeed,effectiveWpm:this.settings.effectiveSpeed}),this.renderPractice()}async playMorse(){if(!this.state.isPlaying){this.state.isPlaying=!0,this.state.currentGroupIndex=0,this.updateProgress(),this.updatePlaybackButtons();
//! モールス信号を再生。
for(let t=0;t<this.state.groups.length&&this.state.isPlaying;t++){const e=this.state.groups[t],n=l.textToMorse(e);await this.audio.playMorseString(n+" /"),this.state.currentGroupIndex=t+1,this.updateProgress()}this.state.isPlaying=!1,this.updatePlaybackButtons(),this.state.currentGroupIndex>=this.state.groups.length&&this.showResult()}}pauseMorse(){this.state.isPlaying=!1,this.audio.stopPlaying(),this.updatePlaybackButtons()}stopLesson(){this.state.isPlaying=!1,this.audio.stopPlaying(),this.render()}showResult(){const t=u.calculateAccuracy(this.state.correctAnswer,this.state.userInput),e=t>=90,n=document.getElementById("resultContainer");n&&(n.innerHTML=`\n\t\t\t<div class="result ${e?"passed":"failed"}">\n\t\t\t\t<h2>${e?"合格！":"不合格"}</h2>\n\t\t\t\t<div class="accuracy">正答率: ${t.toFixed(1)}%</div>\n\t\t\t\t<div class="comparison">\n\t\t\t\t\t<div>送信: ${this.state.correctAnswer}</div>\n\t\t\t\t\t<div>入力: ${this.state.userInput||"（未入力）"}</div>\n\t\t\t\t</div>\n\t\t\t\t<div class="actions">\n\t\t\t\t\t${e?'<button class="btn primary" id="nextLessonBtn">次のレッスンへ</button>':""}\n\t\t\t\t\t<button class="btn" id="retryBtn">もう一度</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t`,e&&this.state.currentLesson<40&&(this.state.currentLesson++,this.saveProgress(),document.getElementById("nextLessonBtn")?.addEventListener("click",()=>{this.render()})),document.getElementById("retryBtn")?.addEventListener("click",()=>{this.render()}))}updateProgress(){const t=document.getElementById("lessonProgress"),e=document.getElementById("progressBar");if(t&&e){const n=this.state.currentGroupIndex/this.state.groups.length*100;t.textContent=`進行: ${this.state.currentGroupIndex}/${this.state.groups.length} (${n.toFixed(0)}%)`,e.style.width=`${n}%`}this.updatePlaybackButtons()}updatePlaybackButtons(){const t=document.getElementById("playBtn"),e=document.getElementById("pauseBtn");t&&e&&(this.state.isPlaying?(t.disabled=!0,e.disabled=!1):(t.disabled=!1,e.disabled=!0))}
//! ========== カスタムモード管理 ==========
async startCustom(){const t=Array.from(this.customState.selectedChars),e={groupSize:this.settings.groupSize,duration:this.settings.practiceDuration,wpm:this.settings.characterSpeed};this.customState.customGroups=u.generateRandomGroups(t,e),this.customState.customCurrentGroupIndex=0,this.customState.customUserInput="",this.customState.customCorrectAnswer=this.customState.customGroups.join(""),this.customState.customIsPlaying=!1,this.customState.isCustomRunning=!0,
//! AudioGeneratorの設定を更新。
this.audio.updateSettings({frequency:this.settings.frequency,volume:this.settings.volume,wpm:this.settings.characterSpeed,effectiveWpm:this.settings.effectiveSpeed}),this.render(),this.renderCustomPractice()}async playCustomMorse(){if(!this.customState.customIsPlaying){this.customState.customIsPlaying=!0,this.customState.customCurrentGroupIndex=0,this.updateCustomProgress(),this.updateCustomPlaybackButtons();
//! モールス信号を再生。
for(let t=0;t<this.customState.customGroups.length&&this.customState.customIsPlaying;t++){const e=this.customState.customGroups[t],n=l.textToMorse(e);await this.audio.playMorseString(n+" /"),this.customState.customCurrentGroupIndex=t+1,this.updateCustomProgress()}this.customState.customIsPlaying=!1,this.updateCustomPlaybackButtons()}}pauseCustomMorse(){this.customState.customIsPlaying=!1,this.audio.stopPlaying(),this.updateCustomPlaybackButtons()}stopCustom(){this.customState.customIsPlaying=!1,this.audio.stopPlaying(),this.customState.isCustomRunning=!1,this.render()}updateCustomProgress(){const t=document.getElementById("customProgress"),e=document.getElementById("customProgressBar");if(t&&e){const n=this.customState.customCurrentGroupIndex/this.customState.customGroups.length*100;t.textContent=`進行: ${this.customState.customCurrentGroupIndex}/${this.customState.customGroups.length} (${n.toFixed(0)}%)`,e.style.width=`${n}%`}this.updateCustomPlaybackButtons()}updateCustomPlaybackButtons(){const t=document.getElementById("customPlayBtn"),e=document.getElementById("customPauseBtn");t&&e&&(this.customState.customIsPlaying?(t.disabled=!0,e.disabled=!1):(t.disabled=!1,e.disabled=!0))}showCustomResult(){const t=document.getElementById("customResultContainer");if(!t)return;
//! lib側の関数を使用して正答率を計算。
const e=u.calculateAccuracy(this.customState.customCorrectAnswer,this.customState.customUserInput),n=this.customState.customUserInput.replace(/\s+/g,""),s=this.customState.customCorrectAnswer.replace(/\s+/g,"");t.innerHTML=`\n\t\t\t<div class="result">\n\t\t\t\t<h2>練習結果</h2>\n\t\t\t\t<div class="accuracy">正答率: ${e}%</div>\n\t\t\t\t<div class="comparison">\n\t\t\t\t\t<div>送信: ${s}</div>\n\t\t\t\t\t<div>あなたの入力: ${n}</div>\n\t\t\t\t</div>\n\t\t\t\t<div class="actions">\n\t\t\t\t\t<button id="retryCustomBtn" class="btn">もう一度</button>\n\t\t\t\t\t<button id="backToCustomMenuBtn" class="btn primary">戻る</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t`,document.getElementById("retryCustomBtn")?.addEventListener("click",()=>{this.customState.isCustomRunning=!1,this.render(),this.startCustom()}),document.getElementById("backToCustomMenuBtn")?.addEventListener("click",()=>{this.customState.isCustomRunning=!1,this.render()})}
//! ========== 設定モーダル ==========
showSettings(){
//! 現在の設定値を取得（volumeを0-100の範囲に変換）。
const t={volume:Math.round(100*this.settings.volume),frequency:this.settings.frequency,wpm:this.settings.characterSpeed,characterSpeed:this.settings.characterSpeed,effectiveSpeed:this.settings.effectiveSpeed,practiceDuration:this.settings.practiceDuration,groupSize:this.settings.groupSize,showInput:this.settings.showInput},e={...this.settings};
//! 設定変更前の値を保存（キャンセル時の復元用）。
//! モーダルを表示。
new a("koch-settings-modal",r,t,{onSave:t=>{
//! 実効速度は文字速度を上限とする。
let e=t.effectiveSpeed;const n=t.characterSpeed;e>n&&(e=n),
//! 設定を保存。
this.settings.characterSpeed=n,this.settings.effectiveSpeed=e,this.settings.frequency=t.frequency,this.settings.volume=t.volume/100,this.settings.practiceDuration=t.practiceDuration,this.settings.groupSize=t.groupSize,this.settings.showInput=t.showInput,this.saveSettings(),
//! AudioGeneratorを更新。
this.audio.updateSettings({frequency:this.settings.frequency,volume:this.settings.volume,wpm:this.settings.characterSpeed,effectiveWpm:this.settings.effectiveSpeed}),
//! 練習中の場合、表示を更新。
this.state.groups.length>0&&this.renderPractice()},onCancel:()=>{
//! 設定を元に戻す。
this.settings={...e},this.audio.updateSettings({frequency:e.frequency,volume:e.volume,wpm:e.characterSpeed,effectiveWpm:e.effectiveSpeed})}}).show("koch")}
//! ========== レンダリング ==========
render(){const t=document.getElementById("app");t&&(t.innerHTML=`\n\t\t\t<div class="settings-icon" id="settingsIcon">\n\t\t\t\t<svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">\n\t\t\t\t\t<path d="M19.14,12.94c0.04-0.3,0.06-0.61,0.06-0.94c0-0.32-0.02-0.64-0.07-0.94l2.03-1.58c0.18-0.14,0.23-0.41,0.12-0.61 l-1.92-3.32c-0.12-0.22-0.37-0.29-0.59-0.22l-2.39,0.96c-0.5-0.38-1.03-0.7-1.62-0.94L14.4,2.81c-0.04-0.24-0.24-0.41-0.48-0.41 h-3.84c-0.24,0-0.43,0.17-0.47,0.41L9.25,5.35C8.66,5.59,8.12,5.92,7.63,6.29L5.24,5.33c-0.22-0.08-0.47,0-0.59,0.22L2.74,8.87 C2.62,9.08,2.66,9.34,2.86,9.48l2.03,1.58C4.84,11.36,4.8,11.69,4.8,12s0.02,0.64,0.07,0.94l-2.03,1.58 c-0.18,0.14-0.23,0.41-0.12,0.61l1.92,3.32c0.12,0.22,0.37,0.29,0.59,0.22l2.39-0.96c0.5,0.38,1.03,0.7,1.62,0.94l0.36,2.54 c0.05,0.24,0.24,0.41,0.48,0.41h3.84c0.24,0,0.44-0.17,0.47-0.41l0.36-2.54c0.59-0.24,1.13-0.56,1.62-0.94l2.39,0.96 c0.22,0.08,0.47,0,0.59-0.22l1.92-3.32c0.12-0.22,0.07-0.47-0.12-0.61L19.14,12.94z M12,15.6c-1.98,0-3.6-1.62-3.6-3.6 s1.62-3.6,3.6-3.6s3.6,1.62,3.6,3.6S13.98,15.6,12,15.6z"/>\n\t\t\t\t</svg>\n\t\t\t</div>\n\n\t\t\t<div class="container">\n\t\t\t\t<header class="header">\n\t\t\t\t\t<button class="back-btn" id="back-btn">メニューに戻る</button>\n\t\t\t\t\t<h1>コッホ法トレーニング</h1>\n\t\t\t\t</header>\n\n\t\t\t\t<div class="tabs">\n\t\t\t\t\t<button class="tab-button ${"learning"===this.viewMode?"active":""}" data-tab="learning">基本学習</button>\n\t\t\t\t\t<button class="tab-button ${"custom"===this.viewMode?"active":""}" data-tab="custom">任意文字列練習</button>\n\t\t\t\t</div>\n\n\t\t\t\t${this.renderModeContent()}\n\t\t\t</div>\n\t\t`,this.attachEventListeners())}renderModeContent(){switch(this.viewMode){case"learning":default:return this.renderLearningMode();case"custom":return this.renderCustomMode()}}renderLearningMode(){const t=u.getCharsForLesson(this.state.currentLesson),e=h.slice(0,40).map((t,e)=>{const n=e+1,s=u.getCharsForLesson(n);return`\n\t\t\t\t<div class="lesson-item ${n===this.state.currentLesson?"current":""} ${n<this.state.currentLesson?"passed":""}" data-lesson="${n}">\n\t\t\t\t\t<div class="lesson-num">L${n}</div>\n\t\t\t\t\t<div class="lesson-chars">${s.join("")}</div>\n\t\t\t\t</div>\n\t\t\t`}).join("");return`\n\t\t\t<div class="flashcard-container">\n\t\t\t\t<div class="lesson-info">\n\t\t\t\t\t<h2>レッスン ${this.state.currentLesson} / 40</h2>\n\t\t\t\t\t<div class="chars">学習文字: ${t.join("")}</div>\n\t\t\t\t\t<button id="startBtn" class="btn btn-primary">練習開始</button>\n\t\t\t\t</div>\n\n\t\t\t\t<div id="practiceContainer"></div>\n\t\t\t\t<div id="resultContainer"></div>\n\n\t\t\t\t<div class="instructions">\n\t\t\t\t\t<h3>使い方</h3>\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li>「練習開始」をクリックしてモールス信号を聞く</li>\n\t\t\t\t\t\t<li>聞こえた文字を入力</li>\n\t\t\t\t\t\t<li>90%以上の正答率で次のレッスンへ</li>\n\t\t\t\t\t</ul>\n\t\t\t\t</div>\n\n\t\t\t\t<div class="lesson-list-section">\n\t\t\t\t\t<h3>レッスン一覧</h3>\n\t\t\t\t\t<div class="lesson-list">\n\t\t\t\t\t\t${e}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t`}renderCustomMode(){if(this.customState.isCustomRunning)
//! 練習実行画面。
return'\n\t\t\t\t<div class="flashcard-container">\n\t\t\t\t\t<div id="customPracticeContainer"></div>\n\t\t\t\t\t<div id="customResultContainer"></div>\n\t\t\t\t</div>\n\t\t\t';return`\n\t\t\t\t<div class="flashcard-container">\n\t\t\t\t\t<div class="lesson-info">\n\t\t\t\t\t\t<h2>任意文字列練習モード</h2>\n\t\t\t\t\t\t<p>練習したい文字を選択してください（最低2文字）</p>\n\t\t\t\t\t\t<div class="char-selection">\n\t\t\t\t\t\t\t${h.map(t=>`\n\t\t\t\t<button class="char-select-btn ${this.customState.selectedChars.has(t)?"selected":""}" data-char="${t}">\n\t\t\t\t\t${t}\n\t\t\t\t</button>\n\t\t\t`).join("")}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<button id="startCustomBtn" class="btn btn-primary" ${this.customState.selectedChars.size<2?"disabled":""}>練習開始</button>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div class="instructions">\n\t\t\t\t\t\t<h3>使い方</h3>\n\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t<li>練習したい文字をクリックして選択</li>\n\t\t\t\t\t\t\t<li>2文字以上選択すると練習開始可能</li>\n\t\t\t\t\t\t\t<li>選択した文字のみでランダムな練習問題が生成されます</li>\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t`}renderPractice(){const t=document.getElementById("practiceContainer");if(!t)return;const e=u.getCharsForLesson(this.state.currentLesson);t.innerHTML=`\n\t\t\t<div class="practice-area">\n\t\t\t\t<div class="progress-section">\n\t\t\t\t\t<div class="progress-bar-container">\n\t\t\t\t\t\t<div id="progressBar" class="progress-bar" style="width: 0%"></div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div id="lessonProgress" class="progress-text">準備完了 - 再生ボタンを押してください</div>\n\t\t\t\t</div>\n\n\t\t\t\t<div class="playback-controls">\n\t\t\t\t\t<button id="playBtn" class="control-btn" title="再生">\n\t\t\t\t\t\t<svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor">\n\t\t\t\t\t\t\t<path d="M8 5v14l11-7z"/>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</button>\n\t\t\t\t\t<button id="pauseBtn" class="control-btn" title="一時停止" disabled>\n\t\t\t\t\t\t<svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor">\n\t\t\t\t\t\t\t<path d="M6 4h4v16H6V4zm8 0h4v16h-4V4z"/>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</button>\n\t\t\t\t\t<button id="stopBtn" class="control-btn" title="停止">\n\t\t\t\t\t\t<svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor">\n\t\t\t\t\t\t\t<rect x="6" y="6" width="12" height="12"/>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\n\t\t\t\t<textarea id="userInput" class="input-area" placeholder="聞こえた文字を入力..." ${this.settings.showInput?"":'style="opacity: 0.3; pointer-events: none;"'}></textarea>\n\t\t\t\t${this.renderKeyboard(e)}\n\t\t\t</div>\n\t\t`;const n=document.getElementById("userInput");n&&n.addEventListener("input",t=>{this.state.userInput=t.target.value.toUpperCase()}),document.getElementById("playBtn")?.addEventListener("click",()=>{this.playMorse()}),document.getElementById("pauseBtn")?.addEventListener("click",()=>{this.pauseMorse()}),document.getElementById("stopBtn")?.addEventListener("click",()=>{this.stopLesson()}),
//! キーボードボタンのイベント設定。
this.setupKeyboardEvents(e),this.updatePlaybackButtons()}renderCustomPractice(){const t=document.getElementById("customPracticeContainer");t&&(t.innerHTML=`\n\t\t\t<div class="practice-area">\n\t\t\t\t<div class="progress-section">\n\t\t\t\t\t<div class="progress-bar-container">\n\t\t\t\t\t\t<div id="customProgressBar" class="progress-bar" style="width: 0%"></div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div id="customProgress" class="progress-text">準備完了 - 再生ボタンを押してください</div>\n\t\t\t\t</div>\n\n\t\t\t\t<div class="playback-controls">\n\t\t\t\t\t<button id="customPlayBtn" class="control-btn" title="再生">\n\t\t\t\t\t\t<svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor">\n\t\t\t\t\t\t\t<path d="M8 5v14l11-7z"/>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</button>\n\t\t\t\t\t<button id="customPauseBtn" class="control-btn" title="一時停止" disabled>\n\t\t\t\t\t\t<svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor">\n\t\t\t\t\t\t\t<path d="M6 4h4v16H6V4zm8 0h4v16h-4V4z"/>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</button>\n\t\t\t\t\t<button id="customStopBtn" class="control-btn" title="停止">\n\t\t\t\t\t\t<svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor">\n\t\t\t\t\t\t\t<rect x="6" y="6" width="12" height="12"/>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\n\t\t\t\t${this.settings.showInput?'\n\t\t\t\t\t<textarea id="customInputArea" class="input-area" placeholder="聞こえた文字を入力してください..."></textarea>\n\t\t\t\t':""}\n\n\t\t\t\t<button id="customEndBtn" class="btn btn-primary">結果を見る</button>\n\t\t\t</div>\n\t\t`,this.setupCustomControls())}renderKeyboard(t){const e=[];
//! KOCH_SEQUENCEをgroupSizeごとに分割。
for(let n=0;n<h.length;n+=this.settings.groupSize)e.push(h.slice(n,n+this.settings.groupSize));return`\n\t\t\t<div class="keyboard">\n\t\t\t\t<div class="keyboard-header">\n\t\t\t\t\t<small>グループベースキーボード（学習済み文字のみ有効）</small>\n\t\t\t\t</div>\n\t\t\t\t<div class="keyboard-controls">\n\t\t\t\t\t<button id="spaceBtn" class="key-btn special">スペース</button>\n\t\t\t\t\t<button id="backspaceBtn" class="key-btn special">1字削除</button>\n\t\t\t\t</div>\n\t\t\t\t<div class="keyboard-groups-wrapper">\n\t\t\t\t\t<div class="keyboard-groups">\n\t\t\t\t\t\t${e.map((e,n)=>`\n\t\t\t\t\t\t\t<div class="keyboard-group">\n\t\t\t\t\t\t\t\t<div class="group-label">G${n+1}</div>\n\t\t\t\t\t\t\t\t<div class="group-keys">\n\t\t\t\t\t\t\t\t\t${e.map(e=>{const n=t.includes(e);return`\n\t\t\t\t\t\t\t\t\t\t\t<button class="key-btn ${n?"":"disabled"}"\n\t\t\t\t\t\t\t\t\t\t\t        data-char="${e}"\n\t\t\t\t\t\t\t\t\t\t\t        ${n?"":"disabled"}>\n\t\t\t\t\t\t\t\t\t\t\t\t${e}\n\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t`}).join("")}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t`).join("")}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t`}setupKeyboardEvents(t){const e=document.getElementById("userInput");e&&(
//! 文字キー。
document.querySelectorAll(".key-btn:not(.special)").forEach(n=>{n.addEventListener("click",n=>{n.preventDefault();const s=n.target.getAttribute("data-char");s&&t.includes(s)&&(e.value+=s,this.state.userInput=e.value.toUpperCase())})}),
//! スペースキー。
document.getElementById("spaceBtn")?.addEventListener("click",t=>{t.preventDefault(),e.value+=" ",this.state.userInput=e.value.toUpperCase()}),
//! バックスペースキー。
document.getElementById("backspaceBtn")?.addEventListener("click",t=>{t.preventDefault(),e.value=e.value.slice(0,-1),this.state.userInput=e.value.toUpperCase()}))}setupCustomControls(){
//! 入力欄のイベントリスナー。
const t=document.getElementById("customInputArea");t&&t.addEventListener("input",t=>{this.customState.customUserInput=t.target.value.toUpperCase()}),document.getElementById("customPlayBtn")?.addEventListener("click",()=>{this.playCustomMorse()}),document.getElementById("customPauseBtn")?.addEventListener("click",()=>{this.pauseCustomMorse()}),document.getElementById("customStopBtn")?.addEventListener("click",()=>{this.stopCustom()}),document.getElementById("customEndBtn")?.addEventListener("click",()=>{this.showCustomResult()}),this.updateCustomPlaybackButtons()}attachEventListeners(){
//! 戻るボタン。
document.getElementById("back-btn")?.addEventListener("click",()=>{window.location.hash="#menu"}),
//! 設定アイコン。
document.getElementById("settingsIcon")?.addEventListener("click",()=>{this.showSettings()}),
//! タブボタン。
document.querySelectorAll(".tab-button").forEach(t=>{t.addEventListener("click",()=>{const e=t.getAttribute("data-tab");e&&(this.viewMode=e,this.saveViewMode(),this.render())})}),
//! モード別のイベントリスナーを設定。
this.setupModeEventListeners()}setupModeEventListeners(){"learning"===this.viewMode?(document.getElementById("startBtn")?.addEventListener("click",()=>{this.startLesson()}),
//! レッスンアイテムのクリックイベント。
document.querySelectorAll(".lesson-item").forEach(t=>{t.addEventListener("click",()=>{const e=parseInt(t.getAttribute("data-lesson")||"1",10);this.state.currentLesson=e,this.saveProgress(),this.render(),window.scrollTo({top:0,behavior:"smooth"})})})):"custom"===this.viewMode&&(this.customState.isCustomRunning||(document.getElementById("startCustomBtn")?.addEventListener("click",()=>{this.startCustom()}),
//! 文字選択ボタン。
document.querySelectorAll(".char-select-btn").forEach(t=>{t.addEventListener("click",()=>{const e=t.getAttribute("data-char");e&&(this.customState.selectedChars.has(e)?this.customState.selectedChars.delete(e):this.customState.selectedChars.add(e),this.saveSelectedChars(),this.render())})})))}destroy(){
//! 音声を停止。
this.audio.stopPlaying()}}const E={characterSpeed:20,effectiveSpeed:15,frequency:700,bFrequency:600,volume:.7};class L{audio;audioB;settings={...E};state={currentCategory:"qso",selectedTemplate:null,isPlaying:!1,userInput:"",showResult:!1,showAnswer:!1,showDialogFormat:!1};customTemplates=[];constructor(){
//! 設定を読み込む。
this.loadSettings(),this.loadCategory(),this.loadCustomTemplates(),
//! A側のAudioGeneratorを初期化。
this.audio=new n({frequency:this.settings.frequency,volume:this.settings.volume,wpm:this.settings.characterSpeed,effectiveWpm:this.settings.effectiveSpeed}),
//! B側のAudioGeneratorを初期化。
this.audioB=new n({frequency:this.settings.bFrequency,volume:this.settings.volume,wpm:this.settings.characterSpeed,effectiveWpm:this.settings.effectiveSpeed})}
//! ========== 設定管理 ==========
loadSettings(){try{const t=localStorage.getItem("v10.listening.settings");t&&(this.settings={...E,...JSON.parse(t)})}catch(t){}}saveSettings(){try{localStorage.setItem("v10.listening.settings",JSON.stringify(this.settings))}catch(t){}}loadCategory(){try{const t=localStorage.getItem("v10.listening.category");t&&["qso","text100","text200","text300","custom"].includes(t)&&(this.state.currentCategory=t)}catch(t){}}saveCategory(){try{localStorage.setItem("v10.listening.category",this.state.currentCategory)}catch(t){}}loadCustomTemplates(){try{const t=localStorage.getItem("v10.listening.customTemplates");t&&(this.customTemplates=JSON.parse(t))}catch(t){}}saveCustomTemplates(){try{localStorage.setItem("v10.listening.customTemplates",JSON.stringify(this.customTemplates))}catch(t){}}
//! ========== テンプレート管理 ==========
getTemplates(){if("custom"===this.state.currentCategory){return[{id:"qso-random-generate",category:"qso",title:"ランダムQSO生成",content:""},...this.customTemplates]}{const t=p.getBuiltinTemplates(this.state.currentCategory);
//! QSOカテゴリーにはランダムQSO生成ボタンを追加。
if("qso"===this.state.currentCategory){return[{id:"qso-random-generate",category:"qso",title:"ランダムQSO生成",content:""},...t]}return t}}
//! ========== 再生制御 ==========
async playMorse(){if(this.state.selectedTemplate&&!this.state.isPlaying){
//! テンプレートに応じて再生（dialogがあればA/B交互、なければcontentを再生）。
if(this.state.isPlaying=!0,this.updatePlaybackButtons(),this.state.showDialogFormat&&this.state.selectedTemplate.dialog)
//! 対話形式で再生（A側とB側を交互に再生）。
await this.playDialogQSO(this.state.selectedTemplate);else if(this.state.selectedTemplate.content){
//! 通常モードで再生（全体をA側で再生）。
const t=l.textToMorse(this.state.selectedTemplate.content);await this.audio.playMorseString(t)}this.state.isPlaying=!1,this.updatePlaybackButtons()}}getTemplateText(t){return t.dialog&&t.dialog.length>0?t.dialog.map(t=>t.text).join(" BT "):t.content||""}async playDialogQSO(t){
//! dialogがない場合（テキストカテゴリ）はcontentを再生。
if(t.dialog&&0!==t.dialog.length)
//! 各セグメントを交互にA側とB側で再生。
for(let e=0;e<t.dialog.length;e++){const n=t.dialog[e],s=l.textToMorse(n.text),i="A"===n.side?this.audio:this.audioB;await i.playMorseString(s),
//! セグメント間に短い間隔を入れる。
e<t.dialog.length-1&&await new Promise(t=>setTimeout(t,500))}else if(t.content){const e=l.textToMorse(t.content);await this.audio.playMorseString(e)}}pauseMorse(){this.audio.stopPlaying(),this.state.isPlaying=!1,this.updatePlaybackButtons()}stopMorse(){this.audio.stopPlaying(),this.state.isPlaying=!1,this.state.userInput="",this.state.showResult=!1,this.state.showAnswer=!1,this.renderPracticeArea()}updatePlaybackButtons(){const t=document.getElementById("playBtn"),e=document.getElementById("pauseBtn");t&&(t.disabled=this.state.isPlaying),e&&(e.disabled=!this.state.isPlaying)}
//! ========== 採点と結果表示 ==========
checkAnswer(){this.state.selectedTemplate&&(this.state.showResult=!0,this.state.showAnswer=!0,this.renderPracticeArea())}toggleAnswer(){this.state.showAnswer=!this.state.showAnswer,this.renderPracticeArea()}toggleDialogFormat(){this.state.showDialogFormat=!this.state.showDialogFormat,this.renderAnswer()}
//! ========== カスタムテンプレート管理 ==========
showCustomTemplateDialog(t){const e=!!t,n=e?t.title:"",s=e?t.content:"",i=document.createElement("div");i.className="modal-overlay",i.innerHTML=`\n\t\t\t<div class="modal">\n\t\t\t\t<h2>${e?"テンプレート編集":"テンプレート新規作成"}</h2>\n\t\t\t\t<div class="form-group">\n\t\t\t\t\t<label for="templateTitle">タイトル:</label>\n\t\t\t\t\t<input type="text" id="templateTitle" value="${n}" placeholder="タイトルを入力">\n\t\t\t\t</div>\n\t\t\t\t<div class="form-group">\n\t\t\t\t\t<label for="templateContent">内容:</label>\n\t\t\t\t\t<textarea id="templateContent" placeholder="モールス信号に変換するテキストを入力">${s}</textarea>\n\t\t\t\t</div>\n\t\t\t\t<div class="modal-actions">\n\t\t\t\t\t<button id="saveTemplateBtn" class="btn btn-primary">保存</button>\n\t\t\t\t\t<button id="cancelTemplateBtn" class="btn">キャンセル</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t`,document.body.appendChild(i),
//! 保存ボタン。
document.getElementById("saveTemplateBtn")?.addEventListener("click",()=>{const n=document.getElementById("templateTitle"),s=document.getElementById("templateContent");if(n.value.trim()&&s.value.trim()){if(e&&t)
//! 既存テンプレートを更新。
t.title=n.value.trim(),t.content=s.value.trim().toUpperCase();else{
//! 新規テンプレートを追加。
const t={id:`custom-${Date.now()}`,category:"qso",title:n.value.trim(),content:s.value.trim().toUpperCase()};this.customTemplates.push(t)}this.saveCustomTemplates(),i.remove(),this.render()}else alert("タイトルと内容を入力してください")}),
//! キャンセルボタン。
document.getElementById("cancelTemplateBtn")?.addEventListener("click",()=>{i.remove()}),
//! モーダル外クリックで閉じる。
i.addEventListener("click",t=>{t.target===i&&i.remove()})}deleteCustomTemplate(t){confirm("この定型文を削除しますか?")&&(this.customTemplates=this.customTemplates.filter(e=>e.id!==t),this.saveCustomTemplates(),this.render())}
//! ========== 設定モーダル ==========
showSettings(){
//! 現在の設定値を取得（volumeを0-100の範囲に変換）。
const t={characterSpeed:this.settings.characterSpeed,effectiveSpeed:this.settings.effectiveSpeed,frequency:this.settings.frequency,bFrequency:this.settings.bFrequency,volume:Math.round(100*this.settings.volume)},e={...this.settings};
//! 設定変更前の値を保存（キャンセル時の復元用）。
//! モーダルを表示。
new a("listening-settings-modal",r,t,{onSave:t=>{
//! 実効速度は文字速度を上限とする。
let e=t.effectiveSpeed;const n=t.characterSpeed;e>n&&(e=n),
//! 設定を保存。
this.settings.characterSpeed=n,this.settings.effectiveSpeed=e,this.settings.frequency=t.frequency,this.settings.bFrequency=t.bFrequency,this.settings.volume=t.volume/100,this.saveSettings(),
//! A側のAudioGeneratorを更新。
this.audio.updateSettings({frequency:this.settings.frequency,volume:this.settings.volume,wpm:this.settings.characterSpeed,effectiveWpm:this.settings.effectiveSpeed}),
//! B側のAudioGeneratorを更新。
this.audioB.updateSettings({frequency:this.settings.bFrequency,volume:this.settings.volume,wpm:this.settings.characterSpeed,effectiveWpm:this.settings.effectiveSpeed})},onCancel:()=>{
//! 設定を元に戻す。
this.settings={...e},this.audio.updateSettings({frequency:e.frequency,volume:e.volume,wpm:e.characterSpeed,effectiveWpm:e.effectiveSpeed}),this.audioB.updateSettings({frequency:e.bFrequency,volume:e.volume,wpm:e.characterSpeed,effectiveWpm:e.effectiveSpeed})},onTestPlay:async()=>{
//! テスト再生: A側とB側の周波数で順番に再生。
const t=l.textToMorse("CQ");await this.audio.playMorseString(t),await new Promise(t=>setTimeout(t,500)),await this.audioB.playMorseString(t)}}).show("listening")}
//! ========== レンダリング ==========
render(){const t=document.getElementById("app");t&&(t.innerHTML=`\n\t\t\t<div class="settings-icon" id="settingsIcon">\n\t\t\t\t<svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">\n\t\t\t\t\t<path d="M19.14,12.94c0.04-0.3,0.06-0.61,0.06-0.94c0-0.32-0.02-0.64-0.07-0.94l2.03-1.58c0.18-0.14,0.23-0.41,0.12-0.61 l-1.92-3.32c-0.12-0.22-0.37-0.29-0.59-0.22l-2.39,0.96c-0.5-0.38-1.03-0.7-1.62-0.94L14.4,2.81c-0.04-0.24-0.24-0.41-0.48-0.41 h-3.84c-0.24,0-0.43,0.17-0.47,0.41L9.25,5.35C8.66,5.59,8.12,5.92,7.63,6.29L5.24,5.33c-0.22-0.08-0.47,0-0.59,0.22L2.74,8.87 C2.62,9.08,2.66,9.34,2.86,9.48l2.03,1.58C4.84,11.36,4.8,11.69,4.8,12s0.02,0.64,0.07,0.94l-2.03,1.58 c-0.18,0.14-0.23,0.41-0.12,0.61l1.92,3.32c0.12,0.22,0.37,0.29,0.59,0.22l2.39-0.96c0.5,0.38,1.03,0.7,1.62,0.94l0.36,2.54 c0.05,0.24,0.24,0.41,0.48,0.41h3.84c0.24,0,0.44-0.17,0.47-0.41l0.36-2.54c0.59-0.24,1.13-0.56,1.62-0.94l2.39,0.96 c0.22,0.08,0.47,0,0.59-0.22l1.92-3.32c0.12-0.22,0.07-0.47-0.12-0.61L19.14,12.94z M12,15.6c-1.98,0-3.6-1.62-3.6-3.6 s1.62-3.6,3.6-3.6s3.6,1.62,3.6,3.6S13.98,15.6,12,15.6z"/>\n\t\t\t\t</svg>\n\t\t\t</div>\n\n\t\t\t<div class="container">\n\t\t\t\t<header class="header">\n\t\t\t\t\t<button id="backBtn" class="back-btn">← 戻る</button>\n\t\t\t\t\t<h1>モールス信号聞き取り練習</h1>\n\t\t\t\t</header>\n\n\t\t\t\t<div class="tabs">\n\t\t\t\t\t${this.renderCategoryTabs()}\n\t\t\t\t</div>\n\n\t\t\t\t<div class="content-area">\n\t\t\t\t\t${this.state.selectedTemplate?this.renderPracticeContent():this.renderTemplateList()}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t`,this.attachEventListeners())}renderCategoryTabs(){return[{id:"qso",label:"ラバースタンプQSO"},{id:"text100",label:"英文100字"},{id:"text200",label:"英文200字"},{id:"text300",label:"英文300字"},{id:"custom",label:"ユーザー定義"}].map(t=>`\n\t\t\t<button class="tab-button ${this.state.currentCategory===t.id?"active":""}" data-category="${t.id}">\n\t\t\t\t${t.label}\n\t\t\t</button>\n\t\t`).join("")}renderTemplateList(){const t=this.getTemplates();return 0===t.length||1===t.length&&"qso-random-generate"===t[0].id?`\n\t\t\t\t<div class="empty-state">\n\t\t\t\t\t<p>定型文がありません</p>\n\t\t\t\t\t${"custom"===this.state.currentCategory?'<button id="addCustomBtn" class="btn btn-primary">新規作成</button>':""}\n\t\t\t\t</div>\n\t\t\t`:`\n\t\t\t<div class="template-list">\n\t\t\t\t${"custom"===this.state.currentCategory?'<button id="addCustomBtn" class="btn btn-primary">新規作成</button>':""}\n\t\t\t\t${t.map(t=>{const e=this.getTemplateText(t),n="qso-random-generate"===t.id?"コールサイン、地名、名前、RSレポート、リグなどがランダムに生成された完全なQSOが作成されます。毎回異なる内容で練習できます。":`${e.substring(0,100)}${e.length>100?"...":""}`;return`\n\t\t\t\t\t<div class="template-card" data-template-id="${t.id}">\n\t\t\t\t\t\t<h3>${t.title}</h3>\n\t\t\t\t\t\t<p class="template-preview">${n}</p>\n\t\t\t\t\t\t<div class="template-actions">\n\t\t\t\t\t\t\t<button class="btn select-btn" data-template-id="${t.id}">選択</button>\n\t\t\t\t\t\t\t${"custom"===this.state.currentCategory&&"qso-random-generate"!==t.id?`\n\t\t\t\t\t\t\t\t<button class="btn edit-btn" data-template-id="${t.id}">編集</button>\n\t\t\t\t\t\t\t\t<button class="btn delete-btn" data-template-id="${t.id}">削除</button>\n\t\t\t\t\t\t\t`:""}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t`}).join("")}\n\t\t\t</div>\n\t\t`}renderPracticeContent(){return this.state.selectedTemplate?`\n\t\t\t<div class="practice-area">\n\t\t\t\t<div class="practice-header">\n\t\t\t\t\t<h2>${this.state.selectedTemplate.title}</h2>\n\t\t\t\t\t<button id="backToListBtn" class="btn">一覧に戻る</button>\n\t\t\t\t</div>\n\n\t\t\t\t<div class="playback-controls">\n\t\t\t\t\t<button id="playBtn" class="control-btn" title="再生" ${this.state.isPlaying?"disabled":""}>\n\t\t\t\t\t\t<svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor">\n\t\t\t\t\t\t\t<path d="M8 5v14l11-7z"/>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</button>\n\t\t\t\t\t<button id="pauseBtn" class="control-btn" title="一時停止" ${this.state.isPlaying?"":"disabled"}>\n\t\t\t\t\t\t<svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor">\n\t\t\t\t\t\t\t<path d="M6 4h4v16H6V4zm8 0h4v16h-4V4z"/>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</button>\n\t\t\t\t\t<button id="stopBtn" class="control-btn" title="停止">\n\t\t\t\t\t\t<svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor">\n\t\t\t\t\t\t\t<rect x="6" y="6" width="12" height="12"/>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</button>\n\t\t\t\t\t<button id="downloadBtn" class="control-btn" title="WAVファイルとしてダウンロード">\n\t\t\t\t\t\t<svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor">\n\t\t\t\t\t\t\t<path d="M19 9h-4V3H9v6H5l7 7 7-7zM5 18v2h14v-2H5z"/>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\n\t\t\t\t<div id="practiceInputArea"></div>\n\t\t\t</div>\n\t\t`:""}renderPracticeArea(){const t=document.getElementById("practiceInputArea");if(!t)return;t.innerHTML=`\n\t\t\t<div class="input-section">\n\t\t\t\t<label for="userInput">聞き取った内容を入力してください:</label>\n\t\t\t\t<textarea id="userInput" class="input-area" placeholder="聞き取った文字を入力...">${this.state.userInput}</textarea>\n\t\t\t</div>\n\n\t\t\t<div class="action-buttons">\n\t\t\t\t<button id="checkBtn" class="btn btn-primary">採点</button>\n\t\t\t\t<button id="showAnswerBtn" class="btn">${this.state.showAnswer?"正解を非表示":"正解を表示"}</button>\n\t\t\t</div>\n\n\t\t\t${this.state.showAnswer?'<div id="answerArea"></div>':""}\n\t\t\t${this.state.showResult?'<div id="resultArea"></div>':""}\n\t\t`;
//! ユーザー入力の監視。
const e=document.getElementById("userInput");e?.addEventListener("input",()=>{this.state.userInput=e.value}),
//! 採点ボタン。
document.getElementById("checkBtn")?.addEventListener("click",()=>{this.checkAnswer()}),
//! 正解表示ボタン。
document.getElementById("showAnswerBtn")?.addEventListener("click",()=>{this.toggleAnswer()}),
//! 正解と結果を描画。
this.state.showAnswer&&this.renderAnswer(),this.state.showResult&&this.renderResult()}renderAnswer(){const t=document.getElementById("answerArea");if(!t||!this.state.selectedTemplate)return;const e="qso"===this.state.selectedTemplate.category,n=this.getTemplateText(this.state.selectedTemplate),s=e?`<button id="toggleDialogBtn" class="btn" style="margin-left: 10px;">${this.state.showDialogFormat?"通常表示":"対話形式で表示"}</button>`:"";
//! 対話形式表示の生成。
let i="";if(e&&this.state.showDialogFormat){i=`\n\t\t\t\t<table class="dialog-table">\n\t\t\t\t\t<tbody>\n\t\t\t\t\t\t${n.split(/\s+BT\s+/).map((t,e)=>`\n\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t<td class="speaker-cell">${e%2==0?"A":"B"}</td>\n\t\t\t\t\t\t\t\t\t<td class="content-cell">${t.trim()}</td>\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t`).join("")}\n\t\t\t\t\t</tbody>\n\t\t\t\t</table>\n\t\t\t`}else i=`<div class="answer-text">${n}</div>`;t.innerHTML=`\n\t\t\t<div class="answer-area">\n\t\t\t\t<h3 style="display: inline-block;">正解</h3>\n\t\t\t\t${s}\n\t\t\t\t${i}\n\t\t\t</div>\n\t\t`,
//! 対話形式ボタン。
document.getElementById("toggleDialogBtn")?.addEventListener("click",()=>{this.toggleDialogFormat()})}renderResult(){const t=document.getElementById("resultArea");if(!t||!this.state.selectedTemplate)return;const e=this.getTemplateText(this.state.selectedTemplate),n=p.calculateAccuracy(e,this.state.userInput);t.innerHTML=`\n\t\t\t<div class="result-area">\n\t\t\t\t<h3>結果</h3>\n\t\t\t\t<div class="accuracy">正答率: ${n}%</div>\n\t\t\t\t<div class="comparison">\n\t\t\t\t\t<div class="comparison-row">\n\t\t\t\t\t\t<strong>正解:</strong>\n\t\t\t\t\t\t<div class="comparison-text">${e}</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class="comparison-row">\n\t\t\t\t\t\t<strong>入力:</strong>\n\t\t\t\t\t\t<div class="comparison-text">${this.state.userInput||"（未入力）"}</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t`}
//! ========== イベントリスナー ==========
attachEventListeners(){
//! 戻るボタン。
document.getElementById("backBtn")?.addEventListener("click",()=>{window.location.hash="#menu"}),
//! 設定アイコン。
document.getElementById("settingsIcon")?.addEventListener("click",()=>{this.showSettings()}),
//! カテゴリータブ。
document.querySelectorAll(".tab-button").forEach(t=>{t.addEventListener("click",()=>{const e=t.getAttribute("data-category");e&&(this.state.currentCategory=e,this.state.selectedTemplate=null,this.state.showResult=!1,this.state.showAnswer=!1,this.state.showDialogFormat=!1,this.state.userInput="",this.saveCategory(),this.render())})}),
//! 定型文選択ボタン。
document.querySelectorAll(".select-btn").forEach(t=>{t.addEventListener("click",()=>{const e=t.getAttribute("data-template-id");if(e)
//! ランダムQSO生成ボタンの場合。
if("qso-random-generate"===e)this.state.selectedTemplate=p.generateRandomQSO(),this.state.showResult=!1,this.state.showAnswer=!1,this.state.showDialogFormat=!1,this.state.userInput="",this.render(),this.renderPracticeArea();else{
//! 通常のテンプレート選択。
const t=[...p.getBuiltinTemplates(),...this.customTemplates].find(t=>t.id===e);t&&(this.state.selectedTemplate=t,this.state.showResult=!1,this.state.showAnswer=!1,this.state.showDialogFormat=!1,this.state.userInput="",this.render(),this.renderPracticeArea())}})}),
//! 一覧に戻るボタン。
document.getElementById("backToListBtn")?.addEventListener("click",()=>{this.state.selectedTemplate=null,this.state.showResult=!1,this.state.showAnswer=!1,this.state.showDialogFormat=!1,this.state.userInput="",this.audio.stopPlaying(),this.render()}),
//! ユーザー定義定型文の新規作成ボタン。
document.getElementById("addCustomBtn")?.addEventListener("click",()=>{this.showCustomTemplateDialog()}),
//! ユーザー定義定型文の編集ボタン。
document.querySelectorAll(".edit-btn").forEach(t=>{t.addEventListener("click",()=>{const e=t.getAttribute("data-template-id");if(e){const t=this.customTemplates.find(t=>t.id===e);t&&this.showCustomTemplateDialog(t)}})}),
//! ユーザー定義定型文の削除ボタン。
document.querySelectorAll(".delete-btn").forEach(t=>{t.addEventListener("click",()=>{const e=t.getAttribute("data-template-id");e&&this.deleteCustomTemplate(e)})}),
//! 再生コントロール（練習画面のみ）。
this.state.selectedTemplate&&(document.getElementById("playBtn")?.addEventListener("click",()=>{this.playMorse()}),document.getElementById("pauseBtn")?.addEventListener("click",()=>{this.pauseMorse()}),document.getElementById("stopBtn")?.addEventListener("click",()=>{this.stopMorse()}),document.getElementById("downloadBtn")?.addEventListener("click",()=>{this.downloadWav()}),this.renderPracticeArea())}async downloadWav(){if(this.state.selectedTemplate)try{
//! テキストをモールス符号に変換。
const t=this.getTemplateText(this.state.selectedTemplate),e=l.textToMorse(t),n=await this.audio.generateWav(e);!function(t,e){const n=URL.createObjectURL(t),s=document.createElement("a");s.href=n,s.download=e,document.body.appendChild(s),s.click(),document.body.removeChild(s),URL.revokeObjectURL(n)}(n,`${function(t){return t.replace(/[^a-zA-Z0-9_-]/g,"_")}(this.state.selectedTemplate.title)}.wav`)}catch(t){alert("WAVファイルの生成に失敗しました。")}}destroy(){
//! AudioGeneratorを停止。
this.audio.stopPlaying()}}class S{currentView=null;routes=[];constructor(){
//! ルート定義。
this.routes=[{path:"",view:v},{path:"menu",view:v},{path:"vertical",view:m},{path:"horizontal",view:g},{path:"flashcard",view:y},{path:"koch",view:w},{path:"listening",view:L}]}init(){
//! ハッシュ変更時のリスナーを登録。
window.addEventListener("hashchange",()=>this.handleRoute()),
//! 初回ルーティング。
this.handleRoute()}handleRoute(){
//! 現在のビューを破棄。
this.currentView&&(this.currentView.destroy(),this.currentView=null);
//! ハッシュからパスを取得（#を除去）。
const t=window.location.hash.slice(1),e=this.routes.find(e=>e.path===t);e?(
//! ビューを作成してレンダリング。
this.currentView=new e.view,this.currentView.render()):
//! 該当するルートがない場合はメニューに遷移。
window.location.hash="#menu"}navigate(t){window.location.hash=`#${t}`}}
//! アプリケーション起動時の処理。
function I(){(new S).init()}
//! DOMContentLoaded後に初期化。
"loading"===document.readyState?document.addEventListener("DOMContentLoaded",I):I();
//# sourceMappingURL=index-BpmTl6A5.js.map
